
include "common.testo"

machine centos {
	cpus: 4
	iso: "${ISO_DIR}/CentOS-8-x86_64-1905-dvd1.iso"
	ram: 8Gb
	disk main: {
		size: 32Gb
	}
	nic nat: {
		attached_to: "nat"
	}
}

test centos_install_os {
	centos {
		start
		wait "Install CentOS Linux 8"; press Enter
		wait "Press [Esc]"; press Esc
		wait "What language would you" timeout 10m; mouse click "Continue"
		mouse click "Installation Dest"
		mouse click "Done"
		mouse click "Software selection"
		mouse click "Minimal Install"
		mouse click "Done".from_top(0)
		mouse click js "find_text().match('Begin Installation').match_background('blue').from_top(0)"
		mouse click "Root Password".from_top(0);
		wait "Enter a password"; type "${password}"
		press Tab; type "${password}"
		mouse click "Done".from_top(0)
		mouse move 200 200
		mouse click "Done".from_top(0)
		wait "CentOS Linux is now successfully installed" timeout 20m
		unplug dvd
		mouse click "Reboot".from_bottom(0)
		wait "localhost login"
	}
}

test centos_install_guest_additions: centos_install_os {
	centos {
		wait "localhost login:"; type "root"; press Enter
		wait "Password:"; type "${password}"; press Enter
		wait "root@localhost"

		plug dvd "${ISO_DIR}/testo-guest-additions.iso"; sleep 5s
		type "mount /dev/cdrom /media"; press Enter
		wait "mounted read-only"; type "rpm -i /media/testo-guest-additions.rpm && echo result is $?"; press Enter
		wait "result is 0"
		type "umount /media"; press Enter
		sleep 5s; unplug dvd

		exec bash "echo hello world"
	}
}

test centos_install_packages: centos_install_guest_additions {
	centos {
		exec bash """
			nmcli connection up ens3
			yum -y install git gcc gcc-c++ make openssl-devel python38-devel libvirt-devel tar wget vim rpm-build
			cd /root
			wget https://github.com/Kitware/CMake/archive/v3.16.5.tar.gz -O cmake.tar.gz
			tar xf cmake.tar.gz
			cd CMake-3.16.5
			./configure
			make -j$(nproc)
			make install
		""" timeout 30m
	}
}

test centos_download_onnxruntime: centos_install_packages {
	centos {
		exec bash """
			cd /root
			git clone https://github.com/microsoft/onnxruntime.git
			cd onnxruntime
			git checkout ${onnxruntime_tagname}
			git submodule sync --recursive
			git submodule update --init --recursive
		""" timeout 2h
	}
}

[no_snapshots: true]
test centos_build_onnxruntime_cpu: centos_download_onnxruntime {
	centos {
		copyto "onnxruntime_patches" "/root/onnxruntime_patches"
		exec bash """
			export PATH=$PATH:/usr/local/bin
			cd /root/onnxruntime
			git apply ../onnxruntime_patches/single_thread.patch
			git apply ../onnxruntime_patches/rename_dll.patch
			git apply ../onnxruntime_patches/cuda.patch
			git apply ../onnxruntime_patches/disable_unit_tests.patch
			./build.sh --config Release --parallel --disable_contrib_ops --build_shared_lib --skip_tests
			mkdir /root/onnxruntime_dist
			mkdir /root/onnxruntime_dist/include
			mkdir /root/onnxruntime_dist/lib
			cp build/Linux/Release/libonnxruntime_testo.so* /root/onnxruntime_dist/lib
			cp include/onnxruntime/core/session/* /root/onnxruntime_dist/include
		""" timeout 2h
		copyfrom "/root/onnxruntime_dist" "${TMP_DIR}/onnxruntime_dist_centos_cpu"
	}
}

test centos_install_cuda: centos_download_onnxruntime {
	centos {
		plug flash nvidia
		sleep 5s
		exec bash """
			mount /dev/sdb1 /media
			ls /media
			/media/${cuda_linux_filename} --silent --toolkit --override
			/usr/local/cuda/bin/nvcc --version
			tar xf /media/${cudnn_linux_filename} -C /root
			ls /root
			umount /media
		""" timeout 10m
		sleep 5s
		unplug flash nvidia
	}
}

[no_snapshots: true]
test centos_build_onnxruntime_gpu: centos_install_cuda {
	centos {
		copyto "onnxruntime_patches" "/root/onnxruntime_patches"
		exec bash """
			cd /root/onnxruntime
			git apply ../onnxruntime_patches/single_thread.patch
			git apply ../onnxruntime_patches/rename_dll.patch
			git apply ../onnxruntime_patches/cuda.patch
			git apply ../onnxruntime_patches/disable_unit_tests.patch
			export PATH="$PATH:/usr/local/bin:/usr/local/cuda/bin"
			./build.sh --config Release --parallel --disable_contrib_ops --build_shared_lib --skip_tests --use_cuda --cuda_home /usr/local/cuda --cudnn_home /root/cuda
			mkdir /root/onnxruntime_dist
			mkdir /root/onnxruntime_dist/include
			mkdir /root/onnxruntime_dist/lib
			cp build/Linux/Release/libonnxruntime_testo.so* /root/onnxruntime_dist/lib
			cp include/onnxruntime/core/session/* /root/onnxruntime_dist/include
			cp include/onnxruntime/core/providers/cuda/cuda_provider_factory.h /root/onnxruntime_dist/include
		""" timeout 2h
		copyfrom "/root/onnxruntime_dist" "${TMP_DIR}/onnxruntime_dist_centos_gpu"
	}
}

[no_snapshots: true]
test centos_build_testo_cpu: centos_install_packages {
	centos {
		copyto "${TMP_DIR}/onnxruntime_dist_centos_cpu" "/root/onnxruntime_dist"
		copyto "${TESTO_SRC_DIR}/3rd_party" "/root/testo/3rd_party"
		copyto "${TESTO_SRC_DIR}/guest_additions" "/root/testo/guest_additions"
		copyto "${TESTO_SRC_DIR}/pkg" "/root/testo/pkg"
		copyto "${TESTO_SRC_DIR}/src" "/root/testo/src"
		copyto "${TESTO_SRC_DIR}/tests" "/root/testo/tests"
		copyto "${TESTO_SRC_DIR}/CMakeLists.txt" "/root/testo/CMakeLists.txt"
		exec bash """
			cd /root/
			mkdir testo_build
			cd testo_build
			export PATH=$PATH:/usr/local/bin
			cmake -DONNX_RUNTIME_DIR=/root/onnxruntime_dist -DUSE_CUDA=off -DCPACK_GENERATOR=RPM -DCMAKE_BUILD_TYPE=Release ../testo
			make testo-package -j$(nproc)
			ls out/pkg
		""" timeout 30m
		copyfrom "/root/testo_build/out/pkg/testo.rpm" "${OUT_DIR}/testo-${TESTO_VERSION}-cpu.rpm"
	}
}

[no_snapshots: true]
test centos_build_testo_gpu: centos_install_packages {
	centos {
		copyto "${TMP_DIR}/onnxruntime_dist_centos_gpu" "/root/onnxruntime_dist"
		copyto "${TESTO_SRC_DIR}/3rd_party" "/root/testo/3rd_party"
		copyto "${TESTO_SRC_DIR}/guest_additions" "/root/testo/guest_additions"
		copyto "${TESTO_SRC_DIR}/pkg" "/root/testo/pkg"
		copyto "${TESTO_SRC_DIR}/src" "/root/testo/src"
		copyto "${TESTO_SRC_DIR}/tests" "/root/testo/tests"
		copyto "${TESTO_SRC_DIR}/CMakeLists.txt" "/root/testo/CMakeLists.txt"
		exec bash """
			cd /root/
			mkdir testo_build
			cd testo_build
			export PATH=$PATH:/usr/local/bin
			cmake -DONNX_RUNTIME_DIR=/root/onnxruntime_dist -DUSE_CUDA=on -DCPACK_GENERATOR=RPM -DCMAKE_BUILD_TYPE=Release ../testo
			make testo-package -j$(nproc)
			ls out/pkg
		""" timeout 30m
		copyfrom "/root/testo_build/out/pkg/testo.rpm" "${OUT_DIR}/testo-${TESTO_VERSION}-gpu.rpm"
	}
}
