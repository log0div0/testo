
include "common.testo"

machine ubuntu {
	cpus: 4
	iso: "${ISO_DIR}/ubuntu-18.04.2-live-server-amd64.iso"
	ram: 8Gb
	disk main: {
		size: 32Gb
	}
	nic nat: {
		attached_to: "nat"
	}
}

test ubuntu_install_os {
	ubuntu {
		start
		wait "English" || "Install Ubuntu Server" || "Please choose your preferred language" timeout 5m
		if (check "English" && !"Install Ubuntu Server" && !"Please choose your preferred language") {
			press Enter
		}
		wait "Install Ubuntu Server" || "Please choose your preferred language"
		if (check "Install Ubuntu Server" && !"Please choose your preferred language") {
			press Enter
		}
		wait "Please choose your preferred language"; press Enter
		wait "Please select your keyboard layout"; press Enter
		wait "Install Ubuntu"; press Enter
		wait "Configure at least one interface"; press Enter
		wait "Proxy address:"; press Enter
		wait "Mirror address:"; press Enter
		wait "Use An Entire Disk"; press Enter
		wait "Choose the disk to install to:"; press Enter
		wait "Filesystem setup"; press Enter
		wait "Confirm destructive action"; press Down, Enter
		wait "Enter the username and password"
		type "${login}"; press Enter
		type "${host_name}"; press Enter
		type "${login}"; press Enter
		type "${password}"; press Enter
		type "${password}"; press Enter
		press Enter
		wait "You can choose to install the OpenSSH server package"; press Tab, Enter
		wait "These are popular snaps in server environment"; press Tab, Enter
		wait "Installation complete!" timeout 30m; press Enter
		wait "Please remove the installation medium"; unplug dvd; press Enter
		wait "${host_name} login:" timeout 30m;
	}
}

test ubuntu_install_guest_additions: ubuntu_install_os {
	ubuntu {
		wait "${host_name} login:"; type "${login}"; press Enter
		wait "Password:"; type "${password}"; press Enter
		sleep 30s; press Enter*10
		wait "${login}@${host_name}:~$"

		type "sudo su"; press Enter;
		wait "password for ${login}"; type "${password}"; press Enter
		type "apt update"; press Enter
		wait "Reading package lists... Done"
		type "apt purge -y netplan.io && echo exit code is $?"; press Enter
		wait "exit code is 0"

		plug dvd "${ISO_DIR}/testo-guest-additions.iso"; sleep 5s
		type "mount /dev/cdrom /media"; press Enter
		wait "mounted read-only"; type "dpkg -i /media/testo-guest-additions.deb"; press Enter
		wait "Processing triggers for ureadahead"
		type "umount /media"; press Enter
		sleep 5s; unplug dvd

		exec bash "echo hello world"
	}
}

test ubuntu_install_packages: ubuntu_install_guest_additions {
	ubuntu {
		exec bash """
			apt -y install git gcc g++ make libssl-dev python3-dev libvirt-dev rpm
			cd /root
			wget https://github.com/Kitware/CMake/archive/v3.16.5.tar.gz -O cmake.tar.gz
			tar xf cmake.tar.gz
			cd CMake-3.16.5
			./configure
			make -j$(nproc)
			make install
			cmake --version
		""" timeout 30m
	}
}

test ubuntu_download_onnxruntime: ubuntu_install_packages {
	ubuntu {
		exec bash """
			cd /root
			git clone https://github.com/microsoft/onnxruntime.git
			cd onnxruntime
			git checkout ${onnxruntime_tagname}
			git submodule sync --recursive
			git submodule update --init --recursive
		""" timeout 2h
	}
}

[no_snapshots: true]
test ubuntu_build_onnxruntime_cpu: ubuntu_download_onnxruntime {
	ubuntu {
		copyto "onnxruntime_patches" "/root/onnxruntime_patches"
		exec bash """
			cd /root/onnxruntime
			git apply ../onnxruntime_patches/single_thread.patch
			git apply ../onnxruntime_patches/rename_dll.patch
			git apply ../onnxruntime_patches/cuda.patch
			git apply ../onnxruntime_patches/disable_unit_tests.patch
			./build.sh --config Release --parallel --disable_contrib_ops --build_shared_lib --skip_tests
			mkdir /root/onnxruntime_dist
			mkdir /root/onnxruntime_dist/include
			mkdir /root/onnxruntime_dist/lib
			cp build/Linux/Release/libonnxruntime_testo.so* /root/onnxruntime_dist/lib
			cp include/onnxruntime/core/session/* /root/onnxruntime_dist/include
		""" timeout 2h
		copyfrom "/root/onnxruntime_dist" "${TMP_DIR}/onnxruntime_dist_ubuntu_cpu"
	}
}

test ubuntu_install_cuda: ubuntu_download_onnxruntime {
	ubuntu {
		plug flash nvidia
		sleep 5s
		exec bash """
			mount /dev/sdb1 /media
			ls /media
			/media/${cuda_linux_filename} --silent --toolkit --override
			/usr/local/cuda/bin/nvcc --version
			tar xf /media/${cudnn_linux_filename} -C /root
			ls /root
			umount /media
		""" timeout 10m
		sleep 5s
		unplug flash nvidia
	}
}

[no_snapshots: true]
test ubuntu_build_onnxruntime_gpu: ubuntu_install_cuda {
	ubuntu {
		copyto "onnxruntime_patches" "/root/onnxruntime_patches"
		exec bash """
			cd /root/onnxruntime
			git apply ../onnxruntime_patches/single_thread.patch
			git apply ../onnxruntime_patches/rename_dll.patch
			git apply ../onnxruntime_patches/cuda.patch
			git apply ../onnxruntime_patches/disable_unit_tests.patch
			export PATH="$PATH:/usr/local/cuda/bin"
			./build.sh --config Release --parallel --disable_contrib_ops --build_shared_lib --skip_tests --use_cuda --cuda_home /usr/local/cuda --cudnn_home /root/cuda
			mkdir /root/onnxruntime_dist
			mkdir /root/onnxruntime_dist/include
			mkdir /root/onnxruntime_dist/lib
			cp build/Linux/Release/libonnxruntime_testo.so* /root/onnxruntime_dist/lib
			cp include/onnxruntime/core/session/* /root/onnxruntime_dist/include
			cp include/onnxruntime/core/providers/cuda/cuda_provider_factory.h /root/onnxruntime_dist/include
		""" timeout 2h
		copyfrom "/root/onnxruntime_dist" "${TMP_DIR}/onnxruntime_dist_ubuntu_gpu"
	}
}

[no_snapshots: true]
test ubuntu_build_testo_guest_additions: ubuntu_install_packages {
	ubuntu {
		copyto "${TESTO_SRC_DIR}/3rd_party" "/root/testo/3rd_party"
		copyto "${TESTO_SRC_DIR}/guest_additions" "/root/testo/guest_additions"
		copyto "${TESTO_SRC_DIR}/pkg" "/root/testo/pkg"
		copyto "${TESTO_SRC_DIR}/src" "/root/testo/src"
		copyto "${TESTO_SRC_DIR}/tests" "/root/testo/tests"
		copyto "${TESTO_SRC_DIR}/CMakeLists.txt" "/root/testo/CMakeLists.txt"
		exec bash """
			cd /root/
			mkdir testo_build
			cd testo_build
			cmake -DCPACK_GENERATOR="DEB;RPM" -DCMAKE_BUILD_TYPE=Release ../testo
			make testo-guest-additions-package -j$(nproc)
			ls out/pkg
		""" timeout 30m
		copyfrom "/root/testo_build/out/pkg/testo-guest-additions.deb" "${TMP_DIR}/testo-guest-additions.deb"
		copyfrom "/root/testo_build/out/pkg/testo-guest-additions.rpm" "${TMP_DIR}/testo-guest-additions.rpm"
	}
}

[no_snapshots: true]
test ubuntu_build_testo_cpu: ubuntu_install_packages {
	ubuntu {
		copyto "${TMP_DIR}/onnxruntime_dist_ubuntu_cpu" "/root/onnxruntime_dist"
		copyto "${TESTO_SRC_DIR}/3rd_party" "/root/testo/3rd_party"
		copyto "${TESTO_SRC_DIR}/guest_additions" "/root/testo/guest_additions"
		copyto "${TESTO_SRC_DIR}/pkg" "/root/testo/pkg"
		copyto "${TESTO_SRC_DIR}/src" "/root/testo/src"
		copyto "${TESTO_SRC_DIR}/tests" "/root/testo/tests"
		copyto "${TESTO_SRC_DIR}/CMakeLists.txt" "/root/testo/CMakeLists.txt"
		exec bash """
			cd /root/
			mkdir testo_build
			cd testo_build
			cmake -DONNX_RUNTIME_DIR=/root/onnxruntime_dist -DUSE_CUDA=off -DCPACK_GENERATOR=DEB -DCMAKE_BUILD_TYPE=Release ../testo
			make testo-package -j$(nproc)
			ls out/pkg
		""" timeout 30m
		copyfrom "/root/testo_build/out/pkg/testo.deb" "${OUT_DIR}/testo-cpu.deb"
	}
}

[no_snapshots: true]
test ubuntu_build_testo_gpu: ubuntu_install_packages {
	ubuntu {
		copyto "${TMP_DIR}/onnxruntime_dist_ubuntu_gpu" "/root/onnxruntime_dist"
		copyto "${TESTO_SRC_DIR}/3rd_party" "/root/testo/3rd_party"
		copyto "${TESTO_SRC_DIR}/guest_additions" "/root/testo/guest_additions"
		copyto "${TESTO_SRC_DIR}/pkg" "/root/testo/pkg"
		copyto "${TESTO_SRC_DIR}/src" "/root/testo/src"
		copyto "${TESTO_SRC_DIR}/tests" "/root/testo/tests"
		copyto "${TESTO_SRC_DIR}/CMakeLists.txt" "/root/testo/CMakeLists.txt"
		exec bash """
			cd /root/
			mkdir testo_build
			cd testo_build
			cmake -DONNX_RUNTIME_DIR=/root/onnxruntime_dist -DUSE_CUDA=on -DCPACK_GENERATOR=DEB -DCMAKE_BUILD_TYPE=Release ../testo
			make testo-package -j$(nproc)
			ls out/pkg
		""" timeout 30m
		copyfrom "/root/testo_build/out/pkg/testo.deb" "${OUT_DIR}/testo-gpu.deb"
	}
}
