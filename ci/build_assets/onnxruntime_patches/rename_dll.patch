diff --git a/cmake/onnxruntime.cmake b/cmake/onnxruntime.cmake
index 9a79115ed..60e75a7cb 100644
--- a/cmake/onnxruntime.cmake
+++ b/cmake/onnxruntime.cmake
@@ -26,28 +26,28 @@ add_custom_command(OUTPUT ${SYMBOL_FILE} ${CMAKE_CURRENT_BINARY_DIR}/generated_s
 
 add_custom_target(onnxruntime_generate_def ALL DEPENDS ${SYMBOL_FILE} ${CMAKE_CURRENT_BINARY_DIR}/generated_source.c)
 if(WIN32)
-    add_library(onnxruntime SHARED
+    add_library(onnxruntime_testo SHARED
       ${SYMBOL_FILE}
       "${ONNXRUNTIME_ROOT}/core/dll/dllmain.cc"
       "${ONNXRUNTIME_ROOT}/core/dll/onnxruntime.rc"
     )
 else()
-    add_library(onnxruntime SHARED ${CMAKE_CURRENT_BINARY_DIR}/generated_source.c)
+    add_library(onnxruntime_testo SHARED ${CMAKE_CURRENT_BINARY_DIR}/generated_source.c)
 endif()
 
-set_target_properties(onnxruntime PROPERTIES VERSION ${ORT_VERSION})
-add_dependencies(onnxruntime onnxruntime_generate_def ${onnxruntime_EXTERNAL_DEPENDENCIES})
-target_include_directories(onnxruntime PRIVATE ${ONNXRUNTIME_ROOT})
-onnxruntime_add_include_to_target(onnxruntime)
+set_target_properties(onnxruntime_testo PROPERTIES VERSION ${ORT_VERSION})
+add_dependencies(onnxruntime_testo onnxruntime_generate_def ${onnxruntime_EXTERNAL_DEPENDENCIES})
+target_include_directories(onnxruntime_testo PRIVATE ${ONNXRUNTIME_ROOT})
+onnxruntime_add_include_to_target(onnxruntime_testo)
 
-target_compile_definitions(onnxruntime PRIVATE VER_MAJOR=${VERSION_MAJOR_PART})
-target_compile_definitions(onnxruntime PRIVATE VER_MINOR=${VERSION_MINOR_PART})
-target_compile_definitions(onnxruntime PRIVATE VER_BUILD=${VERSION_BUILD_PART})
-target_compile_definitions(onnxruntime PRIVATE VER_PRIVATE=${VERSION_PRIVATE_PART})
-target_compile_definitions(onnxruntime PRIVATE VER_STRING=\"${VERSION_STRING}\")
+target_compile_definitions(onnxruntime_testo PRIVATE VER_MAJOR=${VERSION_MAJOR_PART})
+target_compile_definitions(onnxruntime_testo PRIVATE VER_MINOR=${VERSION_MINOR_PART})
+target_compile_definitions(onnxruntime_testo PRIVATE VER_BUILD=${VERSION_BUILD_PART})
+target_compile_definitions(onnxruntime_testo PRIVATE VER_PRIVATE=${VERSION_PRIVATE_PART})
+target_compile_definitions(onnxruntime_testo PRIVATE VER_STRING=\"${VERSION_STRING}\")
 
 if (onnxruntime_USE_CUDA)
-  target_include_directories(onnxruntime PRIVATE ${onnxruntime_CUDNN_HOME}/include ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})
+  target_include_directories(onnxruntime_testo PRIVATE ${onnxruntime_CUDNN_HOME}/include ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})
 endif()
 
 if(UNIX)
@@ -62,13 +62,13 @@ endif()
 
 if (NOT WIN32)
   if (APPLE OR ${CMAKE_SYSTEM_NAME} MATCHES "iOSCross")
-    set_target_properties(onnxruntime PROPERTIES INSTALL_RPATH "@loader_path")
+    set_target_properties(onnxruntime_testo PROPERTIES INSTALL_RPATH "@loader_path")
   else()
     set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-rpath='$ORIGIN'")
   endif()
 endif()
 
-target_link_libraries(onnxruntime PRIVATE
+target_link_libraries(onnxruntime_testo PRIVATE
     onnxruntime_session
     ${onnxruntime_libs}
     ${PROVIDERS_CUDA}
@@ -93,22 +93,22 @@ target_link_libraries(onnxruntime PRIVATE
     ${onnxruntime_EXTERNAL_LIBRARIES})
 
 if (onnxruntime_ENABLE_LANGUAGE_INTEROP_OPS)
-  target_link_libraries(onnxruntime PRIVATE onnxruntime_language_interop onnxruntime_pyop)
+  target_link_libraries(onnxruntime_testo PRIVATE onnxruntime_language_interop onnxruntime_pyop)
 endif()
 
-set_property(TARGET onnxruntime APPEND_STRING PROPERTY LINK_FLAGS ${ONNXRUNTIME_SO_LINK_FLAG} ${onnxruntime_DELAYLOAD_FLAGS})
-set_target_properties(onnxruntime PROPERTIES LINK_DEPENDS ${SYMBOL_FILE})
+set_property(TARGET onnxruntime_testo APPEND_STRING PROPERTY LINK_FLAGS ${ONNXRUNTIME_SO_LINK_FLAG} ${onnxruntime_DELAYLOAD_FLAGS})
+set_target_properties(onnxruntime_testo PROPERTIES LINK_DEPENDS ${SYMBOL_FILE})
 if(onnxruntime_ENABLE_LTO)
-  set_target_properties(onnxruntime PROPERTIES INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE)
-  set_target_properties(onnxruntime PROPERTIES INTERPROCEDURAL_OPTIMIZATION_RELWITHDEBINFO TRUE)
+  set_target_properties(onnxruntime_testo PROPERTIES INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE)
+  set_target_properties(onnxruntime_testo PROPERTIES INTERPROCEDURAL_OPTIMIZATION_RELWITHDEBINFO TRUE)
 endif()
-install(TARGETS onnxruntime
+install(TARGETS onnxruntime_testo
         ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}
         LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}
         RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR})
 
-set_target_properties(onnxruntime PROPERTIES FOLDER "ONNXRuntime")
+set_target_properties(onnxruntime_testo PROPERTIES FOLDER "ONNXRuntime")
 
 if (WINDOWS_STORE)
-  target_link_options(onnxruntime PRIVATE /DELAYLOAD:api-ms-win-core-libraryloader-l1-2-1.dll)
+  target_link_options(onnxruntime_testo PRIVATE /DELAYLOAD:api-ms-win-core-libraryloader-l1-2-1.dll)
 endif()
diff --git a/tools/ci_build/gen_def.py b/tools/ci_build/gen_def.py
index f38d599f4..a41c27e41 100755
--- a/tools/ci_build/gen_def.py
+++ b/tools/ci_build/gen_def.py
@@ -35,7 +35,7 @@ symbols = sorted(symbols)
 symbol_index = 1
 with open(args.output, 'w') as file:
   if args.style == 'vc':    
-    file.write('LIBRARY "onnxruntime.dll"\n')
+    file.write('LIBRARY "onnxruntime_testo.dll"\n')
     file.write('EXPORTS\n')
   else:
     file.write('VERS_%s {\n' % VERSION_STRING)
