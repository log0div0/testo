
include "common.testo"

machine debian {
	cpus: 4
	iso: "${ISO_DIR}/debian-9.12.0-amd64-xfce-CD-1.iso"
	ram: 4Gb
	disk main: {
		size: 32Gb
	}
	nic nat: {
		attached_to: "nat"
	}
}

test debian_install_os {
	debian {
		start
		wait "installer boot menu"; press Enter
		wait "Select a language"; press Enter
		wait "Select your location"; press Enter
		wait "Configure the keyboard"; press Enter
		wait "Please enter the hostname"
		type "${host_name}"; press Enter
		wait "The domain name is"; press Enter
		wait "You need to set a password"
		type "${password}"; press Tab*2
		type "${password}"; press Tab*2
		press Enter
		wait "Please enter the real name of this user"
		type "${login}"; press Enter
		wait "Select a username"
		type "${login}"; press Enter
		wait "A good password"
		type "${password}"; press Tab*2
		type "${password}"; press Tab*2
		press Enter
		wait "If the desired time zone"; press Enter
		wait "The installer can guide you"; press Enter
		wait "Note that all data on the disk"; press Enter
		wait "The disk can be partitioned"; press Enter
		wait "Finish partitioning"; press Enter
		wait "If you continue"; press Down, Enter
		wait "A network mirror can be used" timeout 10m; press Enter
		wait "The goal is to find"; press Enter
		wait "Please select a Debian archive mirror"; press Enter
		wait "If you need to use a HTTP proxy"; press Enter
		wait "The system may anonymously" timeout 10m; press Enter
		wait "choose to install one or more"
		mouse click "Debian desktop environment".left_center().move_left(15)
		mouse click "... Xfce".left_center().move_left(15)
		mouse click "Continue"
		wait "It seems that this new installation" timeout 30m; press Enter
		wait "You need to make the"; press Down, Enter
		wait "Installation is complete"; unplug dvd; press Enter
		wait "${host_name} login"
	}
}

[no_snapshots: true]
test debian_install_guest_additions: debian_install_os {
	debian {
		wait "${host_name} login:"; type "root"; press Enter
		wait "Password:"; type "${password}"; press Enter
		wait "root@${host_name}:~#"

		type "apt update"; press Enter
		wait "Reading package lists... Done"

		plug dvd "${ISO_DIR}/testo-guest-additions.iso"; sleep 5s
		type "mount /dev/cdrom /media"; press Enter
		wait "mounting read-only"; type "dpkg -i /media/testo-guest-additions.deb"; press Enter
		wait "Processing triggers for systemd"
		type "umount /media"; press Enter
		sleep 5s; unplug dvd

		exec bash "echo hello world"
	}
}

test debian_install_packages: debian_install_guest_additions {
	debian {
		exec bash """
			sed -i '/cdrom/d' /etc/apt/sources.list
			apt update
			apt -y install git gcc g++ make libssl-dev python3-dev libvirt-dev libguestfs-dev rpm
			cd /root
			wget https://github.com/Kitware/CMake/archive/v3.16.5.tar.gz -O cmake.tar.gz
			tar xf cmake.tar.gz
			cd CMake-3.16.5
			./configure
			make -j$(nproc)
			make install
			cmake --version
		""" timeout 30m
	}
}

test debian_download_onnxruntime: debian_install_packages {
	debian {
		exec bash """
			cd /root
			git clone https://github.com/microsoft/onnxruntime.git
			cd onnxruntime
			git checkout ${onnxruntime_tagname}
			git submodule sync --recursive
			git submodule update --init --recursive
		""" timeout 2h
	}
}

test debian_build_onnxruntime_cpu: debian_download_onnxruntime {
	debian {
		copyto "${BUILD_ASSETS_DIR}/onnxruntime_patches" "/root/onnxruntime_patches"
		exec bash """
			cd /root/onnxruntime
			${onnxruntime_patch_commands}
			mkdir -p /root/onnxruntime_build
			cd /root/onnxruntime_build
			cmake ../onnxruntime/cmake \
				-DCMAKE_BUILD_TYPE=Release \
				-DCMAKE_INSTALL_PREFIX=/root/onnxruntime_dist \
				-Donnxruntime_DISABLE_CONTRIB_OPS=ON \
				-Donnxruntime_BUILD_SHARED_LIB=ON \
				-Donnxruntime_BUILD_UNIT_TESTS=OFF \
				-Donnxruntime_USE_CUDA=OFF
			make install -j$(nproc)
		""" timeout 2h
		copyfrom "/root/onnxruntime_dist" "${TMP_DIR}/onnxruntime_dist_debian_cpu"
	}
}

test debian_install_cuda: debian_download_onnxruntime {
	debian {
		plug flash nvidia
		sleep 5s
		exec bash """
			mount /dev/sdb1 /media
			ls /media
			/media/${cuda_linux_filename} --silent --toolkit --override
			/usr/local/cuda/bin/nvcc --version
			tar xf /media/${cudnn_linux_filename} -C /root
			ls /root
			umount /media
		""" timeout 10m
		sleep 5s
		unplug flash nvidia
	}
}

test debian_build_onnxruntime_gpu: debian_install_cuda {
	debian {
		copyto "${BUILD_ASSETS_DIR}/onnxruntime_patches" "/root/onnxruntime_patches"
		exec bash """
			export PATH="$PATH:/usr/local/cuda/bin"
			cd /root/onnxruntime
			${onnxruntime_patch_commands}
			mkdir -p /root/onnxruntime_build
			cd /root/onnxruntime_build
			cmake ../onnxruntime/cmake \
				-DCMAKE_BUILD_TYPE=Release \
				-DCMAKE_INSTALL_PREFIX=/root/onnxruntime_dist \
				-Donnxruntime_DISABLE_CONTRIB_OPS=ON \
				-Donnxruntime_BUILD_SHARED_LIB=ON \
				-Donnxruntime_BUILD_UNIT_TESTS=OFF \
				-Donnxruntime_USE_CUDA=ON \
				-Donnxruntime_CUDNN_HOME=/root/cuda
			make install -j$(nproc)
		""" timeout 2h
		copyfrom "/root/onnxruntime_dist" "${TMP_DIR}/onnxruntime_dist_debian_gpu"
	}
}

[no_snapshots: true]
test debian_build_testo_guest_additions: debian_install_packages {
	debian {
		copyto "${TESTO_SRC_DIR}/3rd_party" "/root/testo/3rd_party"
		copyto "${TESTO_SRC_DIR}/guest_additions" "/root/testo/guest_additions"
		copyto "${TESTO_SRC_DIR}/lib" "/root/testo/lib"
		copyto "${TESTO_SRC_DIR}/CMakeLists.txt" "/root/testo/CMakeLists.txt"
		exec bash """
			cd /root/
			mkdir testo_build
			cd testo_build
			cmake ../testo \
				-DCPACK_GENERATOR="DEB;RPM" \
				-DCMAKE_BUILD_TYPE=Release
			make testo-guest-additions-package -j$(nproc)
			ls out/pkg
		""" timeout 30m
		copyfrom "/root/testo_build/out/pkg/testo-guest-additions.deb" "${TMP_DIR}/testo-guest-additions.deb"
		copyfrom "/root/testo_build/out/pkg/testo-guest-additions.rpm" "${TMP_DIR}/testo-guest-additions.rpm"
	}
}

[no_snapshots: true]
test debian_build_testo_cpu: debian_build_onnxruntime_cpu {
	debian {
		copyto "${TESTO_SRC_DIR}/3rd_party" "/root/testo/3rd_party"
		copyto "${TESTO_SRC_DIR}/lib" "/root/testo/lib"
		copyto "${TESTO_SRC_DIR}/pkg" "/root/testo/pkg"
		copyto "${TESTO_SRC_DIR}/src" "/root/testo/src"
		copyto "${TESTO_SRC_DIR}/CMakeLists.txt" "/root/testo/CMakeLists.txt"
		exec bash """
			cd /root/
			mkdir testo_build
			cd testo_build
			cmake ../testo \
				-DCMAKE_BUILD_TYPE=Release \
				-DCPACK_GENERATOR=DEB \
				-DONNX_RUNTIME_DIR=/root/onnxruntime_dist \
				-DUSE_CUDA=off
			make testo-package -j$(nproc)
			ls out/pkg
		""" timeout 30m
		copyfrom "/root/testo_build/out/pkg/testo.deb" "${OUT_DIR}/testo-cpu.deb"
	}
}

[no_snapshots: true]
test debian_build_testo_gpu: debian_build_onnxruntime_gpu {
	debian {
		copyto "${TESTO_SRC_DIR}/3rd_party" "/root/testo/3rd_party"
		copyto "${TESTO_SRC_DIR}/lib" "/root/testo/lib"
		copyto "${TESTO_SRC_DIR}/pkg" "/root/testo/pkg"
		copyto "${TESTO_SRC_DIR}/src" "/root/testo/src"
		copyto "${TESTO_SRC_DIR}/CMakeLists.txt" "/root/testo/CMakeLists.txt"
		exec bash """
			export PATH="$PATH:/usr/local/cuda/bin"
			cd /root/
			mkdir testo_build
			cd testo_build
			cmake ../testo \
				-DCMAKE_BUILD_TYPE=Release \
				-DCPACK_GENERATOR=DEB \
				-DONNX_RUNTIME_DIR=/root/onnxruntime_dist \
				-DUSE_CUDA=on
			make testo-package -j$(nproc)
			ls out/pkg
		""" timeout 30m
		copyfrom "/root/testo_build/out/pkg/testo.deb" "${OUT_DIR}/testo-gpu.deb"
	}
}
