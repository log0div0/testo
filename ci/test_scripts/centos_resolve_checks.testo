
include "centos.testo"

[no_snapshots: true]
test centos_for_range_param: centos_install_testo_cpu {
	centos {
		copyto "${TEST_ASSETS_DIR}/param_resolve/for_tests.testo" "/opt/scripts/for_tests.testo"
		exec bash """
			output=$(testo run /opt/scripts/for_tests.testo --stop_on_fail --test_spec for_range_param --report_folder /opt/report)
			[[ $output == *"0: iteration #0"* ]]
			[[ $output == *"0: iteration #1"* ]]
			[[ $output == *"0: iteration #2"* ]]
			[[ $output == *"0: iteration #3"* ]]

			[[ $output == *"1: iteration #0"* ]]
			[[ $output == *"1: iteration #1"* ]]
			[[ $output == *"1: iteration #2"* ]]
			[[ $output != *"1: iteration #3"* ]]
		"""

		exec bash """
			output=$(testo run /opt/scripts/for_tests.testo --test_spec for_range_str_0)"
			[[ $output == *"iteration #3"* ]]
			[[ $output == *"iteration #4"* ]]
			[[ $output != *"iteration #5"* ]]
		"""

		exec bash """
			output=$(testo run /opt/scripts/for_tests.testo --test_spec for_range_token)"
			[[ $output == *"iteration #3"* ]]
			[[ $output == *"iteration #4"* ]]
			[[ $output != *"iteration #5"* ]]
		"""

		exec bash """
			touch "/opt/scripts/0000.testo"
			touch "/opt/scripts/0001.testo"
			touch "/opt/scripts/0002.testo"
			touch "/opt/scripts/0003.testo"
			touch "/opt/scripts/0004.testo"
		"""

		exec bash """
			output=$(testo run /opt/scripts/for_tests.testo --test_spec for_copyto)
			[[ $output == *"Copying /opt/scripts/./0000.testo to flash drive my_flash to destination /0000.testo"* ]]
			[[ $output == *"Copying /opt/scripts/./0001.testo to flash drive my_flash to destination /0001.testo"* ]]
			[[ $output == *"Copying /opt/scripts/./0002.testo to flash drive my_flash to destination /0002.testo"* ]]
			[[ $output == *"Copying /opt/scripts/./0003.testo to flash drive my_flash to destination /0003.testo"* ]]
			[[ $output == *"Copying /opt/scripts/./0004.testo to flash drive my_flash to destination /0004.testo"* ]]
			[[ $output != *"Copying /opt/scripts/./0005.testo to flash drive my_flash to destination /0005.testo"* ]]
		"""
	}
}

[no_snapshots: true]
test centos_actions_param: centos_install_testo_cpu {
	centos {
		copyto "${TEST_ASSETS_DIR}/param_resolve/actions.testo" "/opt/scripts/actions.testo"

		exec bash """
			set +o pipefail
			testo run /opt/scripts/actions.testo --test_spec check_sleep_param | grep "Sleeping in virtual machine my_ubuntu_server for 1s"
			testo run /opt/scripts/actions.testo --test_spec check_sleep_token | grep "Sleeping in virtual machine my_ubuntu_server for 1s"

			testo run /opt/scripts/actions.testo --test_spec check_type_param | grep "Typing \\\"Hello 1s\\\" with interval 1s in virtual machine my_ubuntu_server"
			testo run /opt/scripts/actions.testo --test_spec check_type_token | grep "Typing \\\"Hello 1s\\\" with interval 1s in virtual machine my_ubuntu_server"

			testo run /opt/scripts/actions.testo --test_spec check_wait_param | grep "Waiting \\\"Hello 200ms\\\" for 200ms with interval 200ms in virtual machine my_ubuntu_server"
			testo run /opt/scripts/actions.testo --test_spec check_wait_token | grep "Waiting \\\"Hello 200ms\\\" for 200ms with interval 200ms in virtual machine my_ubuntu_server"

			testo run /opt/scripts/actions.testo --test_spec check_shutdown_param | grep "Shutting down virtual machine my_ubuntu_server with timeout 200ms"
			testo run /opt/scripts/actions.testo --test_spec check_shutdown_token | grep "Shutting down virtual machine my_ubuntu_server with timeout 200ms"

			testo run /opt/scripts/actions.testo --test_spec check_copyto_param | grep "Copying /opt/scripts/actions.testo to virtual machine my_ubuntu_server to destination /opt/scripts/actions.testo with timeout 200ms"
			testo run /opt/scripts/actions.testo --test_spec check_copyto_token | grep "Copying /opt/scripts/actions.testo to virtual machine my_ubuntu_server to destination /opt/scripts/actions.testo with timeout 200ms"

			testo run /opt/scripts/actions.testo --test_spec check_exec_param | grep "Executing bash command in virtual machine my_ubuntu_server with timeout 200ms"
			testo run /opt/scripts/actions.testo --test_spec check_exec_token | grep "Executing bash command in virtual machine my_ubuntu_server with timeout 200ms"

			testo run /opt/scripts/actions.testo --test_spec check_check_param | grep "Checking \\\"Hello 200ms\\\" for 200ms with interval 300ms in virtual machine my_ubuntu_server"
			testo run /opt/scripts/actions.testo --test_spec check_check_token | grep "Checking \\\"Hello 200ms\\\" for 200ms with interval 300ms in virtual machine my_ubuntu_server"

			testo run /opt/scripts/actions.testo --test_spec check_press_param | grep "Pressing key A 2 times in virtual machine my_ubuntu_server"
			testo run /opt/scripts/actions.testo --test_spec check_press_token | grep "Pressing key A 2 times in virtual machine my_ubuntu_server"

			testo run /opt/scripts/actions.testo --test_spec check_flash_param | grep "Plugging flash drive my_flash into virtual machine my_ubuntu_server"
			testo run /opt/scripts/actions.testo --test_spec check_flash_token | grep "Unplugging flash drive my_flash from virtual machine my_ubuntu_server"

			testo run /opt/scripts/actions.testo --test_spec check_nic_param | grep "Plugging nic my_nic into virtual machine my_ubuntu_server"
			testo run /opt/scripts/actions.testo --test_spec check_nic_token | grep "Unplugging nic my_nic from virtual machine my_ubuntu_server"

			testo run /opt/scripts/actions.testo --test_spec check_link_param | grep "Plugging link my_nic into virtual machine my_ubuntu_server"
			testo run /opt/scripts/actions.testo --test_spec check_link_token | grep "Unplugging link my_nic from virtual machine my_ubuntu_server"

			testo run /opt/scripts/actions.testo --test_spec check_mouse_param | grep "Mouse moving on \\\"lala\\\" with timeout 200ms in virtual machine my_ubuntu_server"
			testo run /opt/scripts/actions.testo --test_spec check_mouse_token | grep "Mouse moving on \\\"lala\\\" with timeout 200ms in virtual machine my_ubuntu_server"
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/actions.testo --test_spec check_sleep_param_invalid 2>&1)
			[[ $output == *"/opt/scripts/actions.testo:30:9: Error while parsing \\\"-7\\\""* ]]
			[[ $output == *"Error: expected TIME INTERVAL, but got NUMBER \\\"-7\\\""* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/actions.testo --test_spec check_type_param_invalid 2>&1)
			[[ $output == *"/opt/scripts/actions.testo:53:39: Error while parsing \\\"interval\\\""* ]]
			[[ $output == *"Error: expected TIME INTERVAL, but got IDENTIFIER \\\"interval\\\""* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/actions.testo --test_spec check_wait_param_invalid 2>&1)
			[[ $output == *"/opt/scripts/actions.testo:77:39: Error while parsing \\\"interval\\\""* ]]
			[[ $output == *"Error: expected TIME INTERVAL, but got IDENTIFIER \\\"interval\\\""* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/actions.testo --test_spec check_shutdown_param_invalid 2>&1)
			[[ $output == *"/opt/scripts/actions.testo:100:20: Error while parsing \\\"\\\""* ]]
			[[ $output == *"Error: expected TIME INTERVAL, but got EOF"* ]]
		"""

	}
}

[no_snapshots: true]
test centos_param_not_defined: centos_install_testo_cpu {
	centos {
		copyto "${TEST_ASSETS_DIR}/param_resolve/not_defined.testo" "/opt/scripts/not_defined.testo"

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec sleep_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${not_defined}\\\""* ]]
			[[ $output == *"param \\\"not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec print_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${not_defined}\\\""* ]]
			[[ $output == *"param \\\"not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec abort_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${not_defined}\\\""* ]]
			[[ $output == *"param \\\"not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec type_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${not_defined}\\\""* ]]
			[[ $output == *"param \\\"not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec wait_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${not_defined}\\\""* ]]
			[[ $output == *"param \\\"not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec mouse_text_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${not_defined}\\\""* ]]
			[[ $output == *"param \\\"not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec mouse_js_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${not_defined}\\\""* ]]
			[[ $output == *"param \\\"not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec flash_not_defined 2>&1)
			[[ $output == *"In a macro call plug_flash"* ]]
			[[ $output == *"unknown flash drive: undefined_flash"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec dvd_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${not_defined}\\\""* ]]
			[[ $output == *"param \\\"not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec from_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${not_defined}\\\""* ]]
			[[ $output == *"param \\\"not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec to_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${not_defined}\\\""* ]]
			[[ $output == *"param \\\"not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec exec_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${not_defined}\\\""* ]]
			[[ $output == *"param \\\"not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec macro_arg_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${arg_not_defined}\\\""* ]]
			[[ $output == *"param \\\"arg_not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec macro_default_arg_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${default_not_defined}\\\""* ]]
			[[ $output == *"param \\\"default_not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec factor_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${factor_not_defined}\\\""* ]]
			[[ $output == *"param \\\"factor_not_defined\\\" is not defined"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/not_defined.testo --test_spec attr_not_defined 2>&1)
			[[ $output == *"Error while resolving \\\"\\$${iso_not_defined}\\\""* ]]
			[[ $output == *"param \\\"iso_not_defined\\\" is not defined"* ]]
		"""
	}
}

[no_snapshots: true]
test centos_cmd_param: centos_install_testo_cpu {
	centos {
		copyto "${TEST_ASSETS_DIR}/param_resolve/commands.testo" "/opt/scripts/commands.testo"

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/commands.testo --test_spec machine_as_string)
			[[ $output == *"my_ubuntu_server: Hello world"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/commands.testo --test_spec flash_as_string)
			[[ $output == *"my_flash: Hello world"* ]]
		"""
	}
}

[no_snapshots: true]
test centos_cmd_macro_args: centos_install_testo_cpu {
	centos {
		copyto "${TEST_ASSETS_DIR}/param_resolve/commands.testo" "/opt/scripts/commands.testo"

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/commands.testo --test_spec basic_macro_command)
			[[ $output == *"Calling command macro some_command_macro"* ]]
			[[ $output == *"Typing \\\"Hello world\\\" with interval 30ms in virtual machine my_ubuntu_server"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/commands.testo --test_spec basic_macro_command_flash)
			[[ $output == *"Calling command macro some_command_flash_macro"* ]]
			[[ $output == *"my_flash: Hello world"* ]]
		"""

		exec bash """
			set +o pipefail
			set +e
			output=$(testo run /opt/scripts/commands.testo --test_spec check_empty_macros)
			[[ $output == *"Calling command macro empty_macro1"* ]]
			[[ $output == *"Calling command macro empty_macro2"* ]]
			[[ $output == *"Calling macro empty_macro1"* ]]
			[[ $output == *"Calling macro empty_macro2"* ]]
		"""
	}
}
