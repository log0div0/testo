..  SPDX-License-Identifier: BSD-3-Clause
    Copyright(c) 2010-2014 Intel Corporation.

Порядок запуска
===============

Аргументы интерпретатора
------------------------

В основе платформы Testo лежит интерпретатор ``testo``

Интерпретатор может работать в двух режимах: в режиме прогона тестов (``testo run``) и в режиме очистки созданных сущностей (``testo clean``)

Режим прогона тестов
++++++++++++++++++++

Ниже приведен список аргументов, которые можно передать в интерпретатор ``testo`` при запуске в режиме прогона тестов

.. code-block:: console

	testo run <input file | input folder> [--stop_on_fail] [--test_spec <wildcard pattern>] \
		[--exclude <wildcard pattern>] [--invalidate <wildcard pattern>] [--prefix <prefix>] [--cache_miss_policy <cache miss policy>] \
    [--json_report <output file>] [--hypervisor <hypervisor type>]

* ``input_file`` или ``input_folder``: Путь к файлу или к папке с тестовыми сценариями. В случае указания папки будет дополнительно проведен рекурсивный поиск по всем подпапкам в указанной директории
* ``stop_on_fail``: Остановить выполнение тестового сценария при возниковении любой ошибки
* ``test_spec <wildcard pattern>``: Запустить только те тесты, чьи имена подпадают под регулярное выражение, указанное в ``<wildcard pattern>``. Формат регулярных выражений можно посмотреть ниже
* ``exclude <wildcard pattern>``: Не запускать тесты, чьи имена подпадают под регулярное выражение, указанное в ``<wildcard pattern>``. Формат регулярных выражений можно посмотреть ниже
* ``invalidate <wildcard pattern>``: Сбросить кэш для тестов, чьи имена подпадают под регулярное выражение, указанное в ``<wildcard pattern>``. Формат регулярных выражений можно посмотреть ниже
* ``prefix <prefix>``: Добавить префикс ко всем сущностям (виртуальные машины, флеш-накопители, сети), участвующим в тестах. Префиксы позволяют создавать аналоги "пространств имен", что позволяет создавать множество независимых стендов (в которых могут быть сущности с одинаковыми именами) и не путаться в них. Префиксы позволяют также создавать несколько незавивисимых экземпляров одного и того же стенда.
* ``cache_miss_policy <cache miss policy>``: Назначить действие по-умолчанию для ветки тестов, в которой кэш потерял актуальность. Возможные значения:

  - ``accept``: Принять потерю актуальности кэша в ветке, запустить тест заново.
  - ``skip_branch``: Принять потерю актуальности кэша в ветке, пропустить выполнение этого теста и всех его потомков.
  - ``abort``: Завершить работу интерпретатора с ошибкой.
* ``json_report <output file>``: Сохранить результаты прогона тестов в формате json в файл, указанный в ``output file``.
* ``hypervisor <hypervisor type>``: Указать используемый гипервизор. В настоящее время полноценно поддерживается гипервизор ``qemu``. Остальные гипервизоры поддерживаются в экспериментальном режиме. Аргумент является необязательным - при его отсутствии тип гипервизора будет определен автоматически в зависимости от типа используемой ОС.


Формат регулярных выражений для аргументов
------------------------------------------

.. list-table::
   :widths: 15 70
   :header-rows: 1

   * - Синтаксис
     - Значение
   * - ``*``
     - Соответствует любой последовательности символов
   * - ``?``
     - Соответствует любому единственному символу
   * - ``\``
     - Экранирующий символ
   * - ``[abc]``
     - Соответствует любому символу, перечисленному в квадратных скобках
   * - ``[!abc]``
     - Соответствует любому символу за исключением перечисленных в квадратных скобках
   * - ``(abc|c)``
     - Соответствует любой из последовательностей, перечисленных в круглых скобках
