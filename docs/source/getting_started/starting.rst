..  SPDX-License-Identifier: BSD-3-Clause
    

Порядок запуска
===============

Аргументы интерпретатора
------------------------

В основе платформы Testo лежит интерпретатор ``testo``

Интерпретатор может работать в двух режимах: в режиме прогона тестов (``testo run``) и в режиме очистки созданных сущностей (``testo clean``)

Режим прогона тестов
++++++++++++++++++++

.. note::

  В режиме прогона тестов необходимо указать путь к файлу с действующей лицензией с помощью аргумента ``license <path>``

Ниже приведен список аргументов, которые можно передать в интерпретатор ``testo`` при запуске в режиме прогона тестов.

.. code-block:: console

  testo run <input file | input folder> [--param <param_name> <param_value>]... \
    [--prefix <prefix>] [--stop_on_fail] [--assume_yes] [--test_spec <wildcard pattern>] \
    [--exclude <wildcard pattern>] [--invalidate <wildcard pattern>] \
    [--report_folder </path/to/folder>] [--report_logs] [--report_screenshots] \
    [--license <path>] [--hypervisor <hypervisor type>]

* ``input_file`` или ``input_folder``: Путь к файлу или к папке с тестовыми сценариями. В случае указания папки будет дополнительно проведен рекурсивный поиск по всем подпапкам в указанной директории
* ``param <param_name> <param_value>``: Объявить параметр с именем ``param_name`` и значением ``param_value``. Параметр будет доступен внутри тестового сценария наряду с статическими прописанными параметрами
* ``prefix <prefix>``: Добавить префикс ко всем сущностям (виртуальные машины, флеш-накопители, сети), участвующим в тестах. Префиксы позволяют создавать аналоги "пространств имен", что позволяет создавать множество независимых стендов (в которых могут быть сущности с одинаковыми именами) и не путаться в них. Префиксы позволяют также создавать несколько незавивисимых экземпляров одного и того же стенда.
* ``stop_on_fail``: Остановить выполнение тестового сценария при возниковении любой ошибки
* ``assume_yes``: Отключить предупреждение о потере кеша в тестах
* ``test_spec <wildcard pattern>``: Запустить только те тесты, чьи имена подпадают под регулярное выражение, указанное в ``<wildcard pattern>``. Формат регулярных выражений можно посмотреть ниже
* ``exclude <wildcard pattern>``: Не запускать тесты, чьи имена подпадают под регулярное выражение, указанное в ``<wildcard pattern>``. Формат регулярных выражений можно посмотреть ниже
* ``invalidate <wildcard pattern>``: Сбросить кэш для тестов, чьи имена подпадают под регулярное выражение, указанное в ``<wildcard pattern>``. Формат регулярных выражений можно посмотреть ниже
* ``report_folder </path/to/folder>``: Сохранять отчеты о прохождении тестов в формате json в указанную папку. Если папка уже существует, она должна быть пустой
* ``report_logs``: Сохранять логи о ходе проведения тестов в файлы. Файлы будут создаваться в папке, указанной в аргументе ``report_folder``. Этот аргумент можно указывать только в совокупности с аргументом ``report_folder``
* ``report_screenshots``: Сохранять скриншоты при ошибках команды ``wait``. Скриншоты будут создаваться в папке, указанной в аргументе ``report_folder``. Этот аргумент можно указывать только в совокупности с аргументом ``report_folder``
* ``license <path>``: Путь к файлу с действующей лицензией.
* ``hypervisor <hypervisor type>``: Указать используемый гипервизор. В настоящее время полноценно поддерживается гипервизор ``qemu``. Остальные гипервизоры поддерживаются в экспериментальном режиме. Аргумент является необязательным - при его отсутствии тип гипервизора будет определен автоматически в зависимости от типа используемой ОС.

Режим очистки созданных сущностей
+++++++++++++++++++++++++++++++++

Ниже приведен список аргументов, которые можно передать в интерпретатор ``testo`` при запуске в режиме очистки созданных сущностей

.. code-block:: console

  testo clean [--prefix <prefix>]

* ``prefix <prefix>``: Очистить все сущности (виртуальные машины, флешки, сети), имеющие заданный префикс

.. note::

  Запуск ``testo clean`` без аргументов приведет к очистке сущностей, не имеющих префикса. При этом очистятся только сущности, созданные интерпретатором

Формат регулярных выражений для аргументов
------------------------------------------

.. list-table::
   :widths: 15 70
   :header-rows: 1

   * - Синтаксис
     - Значение
   * - ``*``
     - Соответствует любой последовательности символов
   * - ``?``
     - Соответствует любому единственному символу
   * - ``\``
     - Экранирующий символ
   * - ``[abc]``
     - Соответствует любому символу, перечисленному в квадратных скобках
   * - ``[!abc]``
     - Соответствует любому символу за исключением перечисленных в квадратных скобках
   * - ``(abc|c)``
     - Соответствует любой из последовательностей, перечисленных в круглых скобках
