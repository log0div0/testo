..  SPDX-License-Identifier: BSD-3-Clause
    Copyright(c) 2010-2014 Intel Corporation.

.. _actions:

Действия
========

start
-----

Формат команды:

.. code-block:: none

	start

**Описание**
	Запускает виртуальную машину. На момент выполнения действия виртуальная машина должна быть выключена. Попытка запустить уже запущенную виртуальную машину приведет к ошибке.

**Аргументы**: нет

stop
----

Формат команды:

.. code-block:: none

	stop

**Описание**
	Останавливает виртуальную машину, имитируя обрыв электропитания. На момент выполнения действия виртуальная машина должна быть запущена. Попытка остановить уже остановленную виртуальную машину приведет к ошибке.

**Аргументы**: нет


shutdown
--------

Формат команды:

.. code-block:: none

	shutdown [timeout time_spec]

**Описание**
	Посылает сигнал ACPI в виртуальную машину, запуская "мягкую" остановку виртуальной машины. Команда дожидается окончания мягкой остановки виртуальной машины. Длительность ожидания зависит от опционального параметра ``timeout``. Для работы этой команды ОС в виртуальной машине должна поддерживать обработку сигнала ACPI. На момент выполнения действия виртуальная машина должна быть запущена. Попытка остановить уже остановленную виртуальную машину приведет к ошибке.

**Аргументы**:

	- ``time_spec`` -  Тип: спецификатор времени. Максимальная длительность ожидания остановки виртуальной машины. Значение по умолчанию - одна минута.

press
-----

Формат команды:

.. code-block:: none

	press <key_spec1>[, key_spec2][,key_spec3]...


**Описание**
	Посылает в ВМ сигнал к нажатию клавиш клавиатуры, указанных в ``key_spec``. При необходимости команда press позволяет передавать сразу последовательность нажатий клавиш. В этом случае нажатия клавиш должны разделяться запятой. Виртуальная машина должна быть запущена.


**Аргументы**:

	- ``key_spec`` -  Сочетание клавиш, которое необходимо нажать.

Сочетание клавиш
++++++++++++++++

Сочетание клавиш представляет собой особую языковую конструкцию, которая имеет следующий формат:

.. code-block:: none

	<key_id1>[+key_id2][+key_id3]...[*number]

``key_id``  представляет собой идентификатор с названием клавиши. Полный список идентификаторов клавиш представлен :ref:`здесь <keys>`. Идентификатор с названием клавиши **нечувствителен к регистру**, поэтому идентификатор ``enter`` эквивалентен ``Enter`` и ``ENTER``

Сочетание клавиш состоит из двух составляющих: перечисление **одновременно нажимаемых клавиш** и спецификатор количества повторений. Секция одновременно перечисляемых клавиш должна состоять из ID хотя бы одной клавиши. Если требуется одновременно нажать несколько клавиш, то для их перечисления используется знак ``+``. Спецификатор количества повторений указывает, сколько раз необходимо нажать клавиши, указанные в первой секции.

Несколько примеров:

	- ``Down`` - единичное нажатие клавиши "стрелка Вниз"
	- ``LEFTCTRL + alt + Delete`` - единичное нажатие сочетания клавиш Ctrl Alt Delete
	- ``LEFTCTRL + alt + Delete * 1`` - эквивалентно предыдущему
	- ``Backspace * 6`` - нажать клавишу Backspace 6 раз
	- ``leftalt + F2 * 3`` - трижды нажать одновременно клавиши "Left alt" и F2

Примеры использования команды ``press``:

	- ``press Down*6, Enter`` - 6 раз нажать клавишу "Вниз", затем нажать "Enter"
	- ``press LeftCTRL + LEFTALT + Delete, Down*2, Enter*3`` - один раз нажать сочетание Ctrl Alt Delete, затем два раза нажать клавишу "стрелка вниз", затем трижды - Enter


type
----

Формат команды:

.. code-block:: none

	type <string>

**Описание**
	Набрать с помощью клавиатуры виртуальной машины строку, указанную в ``<string>``. Витруальная машина должна быть включена. Если в строке присутствуют переносы строк, они будут преобразованы в нажатие клавиши ``Enter``. Если в строке будут присутствовать знаки табуляции, то они будут преобразованы в нажатие клавиши ``Tab``.


**Аргументы**:

	- ``message`` -  Тип: строка. Строка, которую необходимо ввести с помощью виртуальной клавиатуры.

Примеры:

.. code-block:: none

	type "Hello world"
	type "Hello ${World}"
	type """Hello ${World}
		Some multiline
		string ${World} another multiline
	string
	"""


wait
----

Формат команды:

.. code-block:: none

	wait [select_expr] [timeout time_spec]

**Описание**
	Дождаться появления на экране события, указанного в ``<select_expr>``. Длительность ожидания зависит от параметра ``timeout``. Если в течении указанного периода времени нужное выражение не обнаруживается, генерируется ошибка. Для работы действия виртуальная машина должна быть запущена.
	В языке предусмотрена возможность не указывать аргумент ``<select_expr>``, в этом случае будет выполнено безусловное ожидание (подобно sleep) на время, указанное в ``time_spec``.

**Аргументы**:

	- ``select_expr`` -  Выражение, которое необходимо дождаться. Необязательный атрибут.
	- ``time_spec`` -  Тип: спецификатор времени. Максимальная длительность ожидания строки. Значение по умолчанию - одна минута.

Формат выражений для команд wait и check
++++++++++++++++++++++++++++++++++++++++

Команды ``wait`` и ``check`` предоставляют возможность осуществлять как базовые проверки (простой факт наличия строки или комбинации строк на экране), так и более сложные проверки (где требуется задавать более сложные уточнения). Базовые проверки на строки можно осуществляются с помощью **строк**, тогда как более сложные - с помощью **запросов**. В одной команде ``wait`` или ``check`` с помощью логических операторов можно комбинировать несколько строк и запросов.

**Базовые проверки с помощью строк**

Если требуется простая проверка наличия надписи на экране, то достаточно использовать команду ``wait`` в следующем формате

.. code-block:: none

	wait "Искомая строка"

Внутри строк можно использовать обращение к параметрам

.. code-block:: none

	wait "Искомая строка с параметром ${param}"

.. warning ::

	В настоящее время не допускается передавать на вход команд wait и check многострочные литералы

**Сложные проверки с помощью запросов**

Для более сложных проверок в команды ``wait`` и ``check`` можно передавать запросы, написанные на языке ``javascript``. Запросы должны быть оформлены как строки (однострочные или многострочные)

.. code-block:: none

	wait """detect_text("Hello world", "blue", "gray")"""

Пример выше позволяет проверить наличие на экране строку "Hello world", у которой цвет букв - синий, а цвет фона - серый. Такая строка может олицетворять, например, выделенный пункт меню.

Более подробно про построение запросов с помощью javascript можно почитать :ref:`здесь <js_selections>`.


**Комбинация нескольких проверок в одной команде**

Проверки можно комбинировать с помощью логических операторов ``&&`` (И), ``||`` (ИЛИ) и ``!`` (отрицание), формируя, таким образом, выражения ``select_expr``. Выражения также поддерживают скобки для вычисления вложенных выражений.

Примеры:

.. code-block:: none

	wait "Hello world" && "${param}"

Дождаться одновременного наличия на экране надписи "Hello world" и надписи, содержащей значение переменной ``param``


.. code-block:: none

	wait !"Hello world" || js """
		detect_text("Menu entry", "${foreground_colour}", "gray")
	"""

Дождаться либо отсутствия на экране надписи "Hello world", либо наличия на экране надписи "Menu entry" с серым фоном и цветом букв, определенным в параметре ``foreground_colour``

.. _macro_call:

Вызов макроса
-------------

Формат команды:

.. code-block:: none

	<macro_name> ([param1, param2, ...])

**Описание**
	Вызвать макрос ``macro_name``. Макрос должен быть заранее объявлен.

**Аргументы**: Количество параметров должно совпадать с количеством параметров в объявлении макроса. Допускаются только строковые параметры.

plug
----

Действие ``plug`` предназначено для подключения различных устройств к виртуальной машине. Ниже преведены доступные варианты этой команды

plug flash
++++++++++

.. code-block:: none

	plug flash <flash_name>

**Описание**
	Подключить флеш-накопитель к виртуальной машине.


**Аргументы**:

	- ``flash_name`` -  Тип: идентификатор. Имя флеш-накопителя, который нужно подключить к виртуальной машине. Флеш-накопитель должен быть предварительно объявлен.

.. warning ::

	В настоящее время допускается одновременное подключение только одного флеш-накопителя к виртуальной машине. Попытка одновременного подключения нескольких флеш-накопителей приведет к ошибке. Также запрещено подключать флеш-накопитель, который в настоящий момент подключен к другой виртуальной машине

.. warning ::

	Не допускается подключение уже подключенного флеш-накопителя

.. warning ::

	Из-за определенных технических ограничений, в настоящий момент на момент окончания теста флеш-накопитель должен быть **отключен** от виртуальной машины. Разработчик тестов должен позаботиться о том, чтобы в тесте с подключением флеш-накопителя обязательно присутствовало отключение этого флеш-накопителя

.. warning ::

	После подключения виртуального флеш-накопителя ОС Виртуальной машины не всегда моментально обрабатывает это событие, поэтому перед дальшнейшими действиями рекомендуется запустить ожидание на несколько секунд


plug nic
++++++++

.. code-block:: none

	plug nic <nic_name>

**Описание**
	Подключить сетевой адаптер к виртуальной машине. Имя сетевого адаптера должно соответствовать имени, указанному в атрибуте ``nic`` в объявлении виртуальной машины.


**Аргументы**:

	- ``nic_name`` -  Тип: идентификатор. Имя сетевого адаптера, который необходимо подключить. Сетевой адаптер должен быть объявлен в конфигурации виртуальной машины.


.. warning ::

	Не допускается подключение уже подключенного сетевого адаптера


plug link
+++++++++

.. code-block:: none

	plug link <nic_name>

**Описание**
	Подключить кабель к сетевому адаптеру. Имя сетевого адаптера должно соответствовать имени, указанному в атрибуте ``nic`` в объявлении виртуальной машины.


**Аргументы**:

	- ``nic_name`` -  Тип: идентификатор. Имя сетевого адаптера, к которому необходимо подключить кабель.


.. warning ::

	Не допускается подключение уже подключенного кабеля


plug dvd
++++++++

.. code-block:: none

	plug dvd <path_to_iso_file>

**Описание**
	Подключить iso-образ с образом к диску к dvd-приводу. Имя сетевого адаптера должно соответствовать имени, указанному в атрибуте ``nic`` в объявлении виртуальной машины.


**Аргументы**:

	- ``path_to_iso_file`` -  Тип: строка. Путь к iso-образу.


.. warning ::

	Не допускается подключение iso-образа к dvd-приводу, если к приводу уже подключен какой-либо образ


unplug
------

Действие ``unplug`` предназначено для отключения различных устройств от виртуальной машины. Ниже приведены доступные варианты этой команды

unplug flash
++++++++++++

.. code-block:: none

	unplug flash <flash_name>

**Описание**
	Отключить флеш-накопитель от виртуальной машины.


**Аргументы**:

	- ``flash_name`` -  Тип: идентификатор. Имя флеш-накопителя, который нужно отключить. Флеш-накопитель должен быть предварительно объявлен.


.. warning ::

	Не допускается отключение неподключенного флеш-накопителя


unplug nic
++++++++++

.. code-block:: none

	unplug nic <nic_name>

**Описание**
	Отключить сетевой адаптер от виртуальной машины. Имя сетевого адаптера должно соответствовать имени, указанному в атрибуте ``nic`` в объявлении виртуальной машины.


**Аргументы**:

	- ``nic_name`` -  Тип: идентификатор. Имя сетевого адаптера, который необходимо отключить. Сетевой адаптер должен быть объявлен в конфигурации виртуальной машины.


.. warning ::

	Не допускается отключение неподключенного сетевого адаптера


unplug link
+++++++++++

.. code-block:: none

	unplug link <nic_name>

**Описание**
	Отключить кабель от сетевого адаптера. Имя сетевого адаптера должно соответствовать имени, указанному в атрибуте ``nic`` в объявлении виртуальной машины.


**Аргументы**:

	- ``nic_name`` -  Тип: идентификатор. Имя сетевого адаптера, от которого необходимо отключить кабель.


.. warning ::

	Не допускается отключение неподключенного кабеля


unplug dvd
++++++++++

.. code-block:: none

	unplug dvd

**Описание**
	Отключить текущий iso-образ от dvd-привода.


**Аргументы**: нет


.. warning ::

	Не допускается отлючение iso-образа, если в настоящий момент нет какого-либо подключенного iso-образа


exec
----

Формат команды:

.. code-block:: none

	exec <interpreter> <string>

**Описание**
	Выполняет в виртуальной машине команду, указанную в ``<string>``  с помощью интерпретатора, который указан в ``<interpreter>``. Для работы необходимо наличие в виртуальной машине агента ``negotiator``. Если интерпретатор выполнил команду с ошибкой (код возврата не равен 0), то команда ``exec`` завершает текущий тест с ошибкой. Поток вывода и поток ошибок команды перенаправляется на поток вывода интерпретатора ``testo`` и пользователь может наблюдать за ходом выполнения команд в режиме реального времени.

**Аргументы**:

	- ``interpreter`` - Тип: идентификатор. Имя интерпретатора, который будет выполнять команду. В настоящее время поддерживается интерпретаторы ``bash``, ``python``, ``python2`` и ``python3``.
	- ``string`` - Тип: строка. Команда, которую необходимо выполнить.

copyto
------

Формат команды:

.. code-block:: none

	copyto <from> <to>

**Описание**
	Копирует файл или папку из хостовой машины на виртуальную машину. Для работы необходимо наличие в виртуальной машине агента ``negotiator``.


**Аргументы**:

	- ``from`` - Тип: строка. Путь к файлу или папке на хостовой машине, которую необходимо скопировать на виртуальную машину.
	- ``to`` - Тип: строка. **Полный** путь назначения на виртуальной машине.

.. note::
	В качестве пути назначения должен фигурировать полный путь (то есть с указанием конечного файла или папки). Например, если необходимо скопировать файл ``/home/user/some_file.txt`` на виртуальную машину, то нужно выполнить команду ``copyto /home/user/some_file.txt /path/on/vm/some_file.txt``. Аналогично необходимо поступать с копированием папок.

.. warning::
	не допускается копирование ссылок

copyfrom
--------

Формат команды:

.. code-block:: none

	copyfrom <from> <to>

**Описание**

Копипует файл или папку из виртуальной машины на хост. Для работы необходимо наличие в виртуальной машине агента ``negotiator``


**Аргументы**:

	- ``from`` - Тип: строка. Путь к файлу или папке на виртуальной машине, которую необходимо скопировать на хост.
	- ``to`` - Тип: строка. **Полный** путь назначения на хостовой машине.

.. note::
	В качестве пути назначения должен фигурировать полный путь (то есть с указанием конечного файла или папки) (см. copyto)

.. warning::
	Не допускается копирование ссылок


abort
-----

Формат команды:

.. code-block:: none

	abort <error_message>

**Описание**
	Аварийно завершает выполнение текущего теста и генерирует сообщение об ошибке. Тест считается неудачно завершившимся.

**Аргументы**:

	- ``error_message`` - Тип: строка. Сообщение об ошибке.


print
-----

Формат команды:

.. code-block:: none

	print <message>

**Описание**
	Выводит на экран сообщение, после чего тест продолжает работу.

**Аргументы**:

	- ``message`` -  Тип: строка. Сообщение, которое необходимо вывести на экран.

