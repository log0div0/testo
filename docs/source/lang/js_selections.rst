..  SPDX-License-Identifier: BSD-3-Clause
    

.. _js_selections:

Поисковые выражения с использованием javascript
===============================================

Поисковые выражения с ипользованием javascript позволяют выполнять сложную обработку содержимого на экране. В случае, когда стандартного поиска наличия строк или их комбинаций становится недостаточно, чтобы принять решение о наступлении нужного события в командах ``wait`` и ``check``, вы можете усложнить обработку с помощью запроса на языке javascript. Вы также можете использовать javascript при работе с курсором мыши (см. :ref:`здесь <mouse>`)

Основные правила составления запросов
-------------------------------------

Для составления запроса с использованием javascript необходимо указать ключевое слово ``js`` и затем написать js-скрипт в виде однострочной или многострочной строки, который должен возвращать bool-значение.

Команды ``wait`` и ``check`` будут периодически снимать состояния экрана виртуальной машины (в случае с ``check`` проверка будет сделана один раз, только если не указан спеуификатор ``timeout``), и для каждого снятого скриншота будет вызываться js-обработчик.

Внутри js-скрипта можно использовать ряд встроенных функций, список которых представлен далее. С помощью этих встроенных функций можно оценивать содержимое экрана

Команды ``wait`` и ``check`` оценивают результат выполнения javascript как **положительный** в следующих случаях:

	- если возвращается bool-значение true
	- если возвращается массив объектов ненулевой длины

Команды ``wait`` и ``check`` оценивают результат выполнения javascript как **отрицательный** в следующих случаях:

	- если возвращается bool-значение false
	- если возвращается массив объектов нулевой длины

Во всех остальных случаях результат работы javascript будет восприниматься как **ошибка**

.. note::
	Если js-скрипт оформлен в однострочной строке, то необходимо экранировать двойные кавычки, использующиеся внутри самого скрипта (см. пример ниже).

	Если же js-скрипт оформлен с использованием многострочных строк, то экранировать двойные кавычки не нужно.

Встроенные функции
------------------

detect_text
+++++++++++

Формат

.. code-block:: none

	detect_text(text, foreground, background)

**Аргументы**:

	- ``text`` -  Тип: строка. Искомый текст (в пределах одной строки)
	- ``foreground`` -  Тип: строка. Цвет искомого текста. Необязательный атрибут
	- ``background`` -  Тип: строка. Цвет фона искомого текста. Необязательный атрибут


**Возвращаемое значение** - Массив объектов с координатами геометрических центров всех строк на экране, подходящих под критерии, указанных в аргументах.

Примеры

**Пример 1**. Дождаться появления надписи Hello world синего цвета на сером фоне

.. code-block:: none

	wait js "detect_text('Hello world', 'blue', 'gray')"
