..  SPDX-License-Identifier: BSD-3-Clause
    Copyright(c) 2010-2014 Intel Corporation.

.. _var_refs:

Обращение к переменным
======================

В языке Testo существует обобщать процесс тестирования с помощью переменных. На текущий момент переменные могут принимать только текстовые значения. Существует четыре способа задавания переменных:

	- Через переменную окружения
	- Через секцию ``metadata``, указанную в конфигурации виртуальной машины
	- Через счетсчик в цикле ``for``
	- В качестве параметров в макросах

Обращаться к переменным можно в следующих местах скриптов:

	- в составе :ref:`действий <actions>`, которые в качестве аргумента принимают строки
	- в конфигурациях виртуальной машины или виртуального флеш-накопителя (в тех атрибутах, которые могут принимать строковые значения). Обращение к переменной во всех случаях выглядит одинаково:

.. code-block:: none

	$VAR_REF

Где ``VAR_REF`` - это идентификатор с именем переменной

В качестве результата обращения к переменной всегда будет получена строка.

Порядок разрешения значения переменных
++++++++++++++++++++++++++++++++++++++

При обращении к переменной ее значение вычисляется по следующему алгоритму, причем если на каком-то шаге находится значение переменной, то алгоритм прекращается:

	1) Если обращение к переменной происходит внутри цикла ``for``, то проверяется, является ли переменная счетчиком цикла
	2) Если обращение к переменной происходит внутри макроса, то проверяется, является ли переменная параметром макроса
	3) Если обращение к переменной происходит в рамках выполнения теста, то проверяется, является ли переменная атрибутом в секции ``metadata`` конфигурации виртуальной машины
	4) Если на предыдущих этапах не получилось вычислить значение, то проверяется, является ли переменная переменной окружения
	5) Возвращается пустая строка

Пример (при запуске определена переменная окружения ``PATH_TO_ISO = /path/to/iso``)

.. code-block:: none

	machine vm1 {
		...
		metadata: {
			attr1: "value1"
			attr2: "value2"
		}
	}

	machine vm2 {
		iso: $PATH_TO_ISO
		...
		metadata: {
			attr1: "value3"
			attr2: "value4"
			attr3: "value5"
		}
	}

	macro some_macro(attr2) {
		for i in 1..2 {
			print $i + " " + $attr2
		}

		print $attr3
	}

	test some_test {
		vm1, vm2 {
			some_macro($attr1)
			some_macro($attr2)
		}
	}



Вывод на экран в данном случае будет следующий:

.. code-block:: none

	1 value1
	2 value1

	1 value2
	2 value2

	1 value3
	2 value3
	value5
	1 value4
	2 value4
	value5

Давайте разберем логику разрешения переменных в этом примере

В объявлении виртуальной машины используется переменная ``$PATH_TO_ISO``, которая будет вычислена из переменной окружения, т.к. объявление виртуальной машины не происходит в рамках теста. Т.к. эта переменная задана, то конечное значение атрибута ``iso`` будет равно ``"/path/to/iso"``

В тесте ``some_test`` для двух виртуальных машин трижды вызывается макрос с циклом. Порядок работы с переменными выглядит следующим образом:

Для виртуальной машины ``vm1`` в момент запуска макроса ``some_macro`` вычисляется значение переменной ``attr1``. Это значение будет взято из секции ``metadata`` конфигурации виртуальной машины. Значение ``attr1`` равно ``"value1"``, поэтому это значение будет передано в качестве параметра в макрос ``some_macro``. Внутри макроса есть цикл, внутри которого происходит обращение к переменным ``i`` и ``attr2``. Значение ``i`` будет рассчитано из значения счетстчика в цикле ``for``. Значение ``attr2`` будет вычислено из параметра макроса. На текущий момент параметр равен ``value1``.

За рамками цикла есть обращение к переменной ``attr3``. ``attr3`` не является параметром макроса, поэтому произойдет попытка вычислить значение, исходя из метаданных виртуальной машины. Для ``vm1`` такая попытка закончится неудачей, и затем произойдет поиск в переменных окружения. Т.к. переменная окружения ``attr3`` не задана, то вернется пустая строка, которая и выведется на экран. Для ``vm2`` поиск ``attr3`` в метаданных виртуальной машины произойдет успешно