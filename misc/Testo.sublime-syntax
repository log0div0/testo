%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - testo
scope: source.testo

variables:
  identifier: '[A-Za-z_][A-Za-z_0-9]*'

contexts:
  prototype:
    - include: comments

  main:
    - include: machine
    - include: snapshot
    - include: flash
    - include: macro
    - include: test
    - include: keywords
    - include: numbers
    - include: var_refs
    - include: time_intervals
    - include: size_specifiers
    - include: strings
    - include: comparisons
    - include: ops
    - include: actions

  machine:
    - match: '\bmachine\b'
      scope: keyword.control.testo
      push:
        - match: '{{identifier}}'
          scope: entity.name.testo
          pop: true

  snapshot:
    - match: '\bsnapshot\b'
      scope: keyword.control.testo
      set:
        - match: '{{identifier}}'
          scope: entity.name.testo
          set:
            - match: ':'
              set:
                - match: '{{identifier}}'
                  scope: entity.other.inherited-class.testo
                  pop: true
            - match: '{'
              pop: true

  flash:
    - match: '\bflash\b'
      scope: keyword.control.testo
      push:
        - match: '{{identifier}}'
          scope: entity.name.testo
          pop: true

  macro:
    - match: '\bmacro\b'
      scope: keyword.control.testo
      set:
        - match: '{{identifier}}'
          scope: entity.name.function.testo
          set:
            - match: '\('
              scope: punctuation.section.group.begin.testo
              set:
                - match: '{{identifier}}'
                  scope: variable.parameter.testo
                - match: '\)'
                  scope: punctuation.section.group.end.testo
                  pop: true
            - match: '{'
              pop: true

  test:
    - match: '\btest\b'
      scope: keyword.control.testo
      set:
        - match: '{{identifier}}'
          scope: entity.name.testo
          set:
            - match: ':'
              set:
                - match: '{{identifier}}'
                  set:
                    - match: '\('
                      scope: punctuation.section.group.begin.testo
                      push:
                        - match: '{{identifier}}'
                          scope: entity.other.inherited-class.testo
                        - match: '\)'
                          scope: punctuation.section.group.end.testo
                          pop: true
                    - match: '{'
                      pop: true

  keywords:
    - match: '\binclude\b'
      scope: keyword.control.import.testo
    - match: '\b(if|else|continue|break|for)\b'
      scope: keyword.control.conditional.testo

  numbers:
    - match: '\b[0-9.]+\b'
      scope: constant.numeric.testo

  var_refs:
    - match: '\$'
      scope: punctuation.definition.variable.testo
      push:
        - match: '{{identifier}}'
          scope: variable.other.testo
        - match: '\b'
          pop: true

    - match: '\b\${{identifier}}\b'
      scope: constant.numeric.testo

  time_intervals:
    - match: '\b[0-9.]+[s,m,h]\b'
      scope: constant.other

  size_specifiers:
    - match: '\b[0-9.]+[K,M,G]b\b'
      scope: constant.other

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.testo
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.testo
        - match: '\\.'
          scope: constant.character.escape.testo
        - match: '"'
          scope: punctuation.definition.string.end.testo
          pop: true
    - match: '"""'
      scope: punctuation.definition.string.begin.testo
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.other
        - match: '\\.'
          scope: constant.character.escape.testo
        - match: '"""'
          scope: punctuation.definition.string.end.testo
          pop: true

  comparisons:
    - match: '\b(EQUAL|LESS|GREATER|STREQUAL|STRGREATER|STRLESS)\b'
      scope: keyword.operator.comparison.testo

  ops:
    - match: '\b(NOT|AND|OR|check)\b'
      scope: keyword.operator.logical.testo

  actions:
    - match: '\b(type|wait|press|plug|unplug|start|stop|exec|set|copyto|copyfrom)\b'
      scope: support.function.testo

  comments:
    - match: '#'
      scope: punctuation.definition.comment.testo
      push:
        - meta_scope: comment.line.testo
        - match: $\n?
          pop: true
    - match: '\/\*'
      scope: punctuation.definition.comment.testo
      push:
        - meta_scope: comment.block.testo
        - match: \*\/
          pop: true
