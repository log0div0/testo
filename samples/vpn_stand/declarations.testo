machine testo_vpn_sgw1 {
	cpus: 1
	ram: 512Mb
	iso: $ISO_DIR + "/ubuntu-16.04.6-server-amd64.iso"
	disk_size: 4Gb
	nic nat: {
		slot: 0
		attached_to: "nat"
		adapter_type: "e1000"
	}

	nic WAN: {
		slot: 1
		attached_to: "internal"
		network: "net2"
		mac: "52:54:00:00:00:00"
		adapter_type: "e1000"
	}

	nic LAN: {
		slot: 2
		attached_to: "internal"
		network: "net1"
		mac: "52:54:00:00:00:11"
		adapter_type: "e1000"
	}

	metadata: {
		login: "vpn-sgw1"
		password: "1111"
		host_name: "testo-vpn-sgw1"
	}
}

machine testo_vpn_sgw2 {
	cpus: 1
	ram: 512Mb
	iso: $ISO_DIR + "/ubuntu-16.04.6-server-amd64.iso"
	disk_size: 4Gb
	nic nat: {
		slot: 0
		attached_to: "nat"
		adapter_type: "e1000"
	}

	nic WAN: {
		slot: 1
		attached_to: "internal"
		network: "net2"
		mac: "52:54:00:00:11:00"
		adapter_type: "e1000"
	}

	nic LAN: {
		slot: 2
		attached_to: "internal"
		network: "net3"
		mac: "52:54:00:00:11:11"
		adapter_type: "e1000"
	}

	metadata: {
		login: "vpn-sgw2"
		password: "1111"
		host_name: "testo-vpn-sgw2"
	}
}

machine testo_vpn_client1 {
	cpus: 1
	ram: 512Mb
	iso: $ISO_DIR + "/ubuntu-16.04.6-server-amd64.iso"
	disk_size: 4Gb

	nic nat: {
		slot: 0
		attached_to: "nat"
		adapter_type: "e1000"
	}

	nic LAN: {
		slot: 1
		attached_to: "internal"
		network: "net1"
		mac: "52:54:00:00:22:00"
		adapter_type: "e1000"
	}

	metadata: {
		login: "vpn-client1"
		password: "1111"
		host_name: "testo-vpn-client1"
	}
}

machine testo_vpn_client2 {
	cpus: 1
	ram: 512Mb
	iso: $ISO_DIR + "/ubuntu-16.04.6-server-amd64.iso"
	disk_size: 4Gb

	nic nat: {
		slot: 0
		attached_to: "nat"
		adapter_type: "e1000"
	}

	nic LAN: {
		slot: 1
		attached_to: "internal"
		network: "net3"
		mac: "52:54:00:00:33:00"
		adapter_type: "e1000"
	}

	metadata: {
		login: "vpn-client2"
		password: "1111"
		host_name: "testo-vpn-client2"
	}
}

machine testo_vpn_sniffer {
	cpus: 1
	ram: 512Mb
	iso: $ISO_DIR + "/ubuntu-16.04.6-server-amd64.iso"
	disk_size: 4Gb
	nic nat: {
		slot: 0
		attached_to: "nat"
		adapter_type: "e1000"
	}

	nic WAN: {
		slot: 1
		attached_to: "internal"
		network: "net2"
		mac: "52:54:00:00:44:00"
		adapter_type: "e1000"
	}

	metadata: {
		login: "vpn-sniffer"
		password: "1111"
		host_name: "testo-vpn-sniffer"
	}
}

snapshot ubuntu_installed {
	wait timeout 2s
	wait "Language"; press Enter;
	wait "Install Ubuntu Server"; press Enter;
	wait "Choose the language";	press Enter
	wait "Select your location"; press Enter
	wait "Detect keyboard layout?";	press Enter
	wait "Country of origin for the keyboard"; press Enter
	wait "Keyboard layout"; press Enter
	wait "Primary network interface" timeout 5m; press Enter
	wait "Hostname:" timeout 30s; press Backspace*6; type $host_name; press Enter
	wait "Full name for the new user"; type $login; press Enter
	wait "Username for your account"; press Enter
	wait "Choose a password for the new user"; type $password; press Enter
	wait "Re-enter password to verify"; type $password; press Enter
	wait "Use weak password?"; press Left, Enter
	wait "Encrypt your home directory?"; press Enter
	if ($HTTP_PROXY) {
		wait "Select your time zone" timeout 2m; press Enter
	} else {
		wait "Moscow" timeout 2m; press Enter
	}

	wait "Partitioning method"; press Enter
	wait "Select disk to partition"; press Enter
	wait "Write the changes to disks and configure LVM?"; press Left, Enter
	wait "Amount of volume group to use for guided partitioning"; press Enter
	wait "Write the changes to disks?"; press Left, Enter
	wait "HTTP proxy information" timeout 3m; type $HTTP_PROXY; press Enter
	wait "How do you want to manage upgrades" timeout 6m; press Enter
	wait "Choose software to install"; press Enter
	wait "Install the GRUB boot loader to the master boot record?" timeout 10m; press Enter
	wait "Installation complete" timeout 1m; unplug dvd; press Enter
	wait $host_name +  " login:" timeout 2m;
	type $login; press Enter
	wait "Password:"; type $password; press Enter
	wait "Welcome to Ubuntu"
}

snapshot negotiator_installed: ubuntu_installed {
	type "sudo su"; press Enter;
	wait "password for " + $login; type $password; press Enter
	type "apt-get update"; press Enter
	wait "Reading package lists... Done" timeout 1m;
	type "clear && apt-get install -y python daemon"; press Enter
	wait "Setting up daemon" timeout 1m
	wait "root@" + $host_name

	plug dvd $ISO_DIR + "/negotiator.iso"; wait timeout 5s
	type "mount /dev/cdrom /media"; press Enter
	wait "mounting read-only"; type "dpkg -i /media/negotiator-agent-0.0.1.deb"; press Enter;
	wait "Processing triggers for systemd"; wait timeout 2s

}

snapshot pkgs_and_net_ready: negotiator_installed {
	#TODO: path search from current file
	copyto "./utils/rename_net.sh" "/tmp/rename_net.sh"
	exec bash "chmod +x /tmp/rename_net.sh"

	if ($vm_name STREQUAL "testo_vpn_sgw1") {
		exec bash "apt-get install -y libmnl-dev libelf-dev linux-headers-$(uname -r) build-essential pkg-config"
		exec bash "/tmp/rename_net.sh 52:54:00:00:00:00 WAN"
		exec bash "/tmp/rename_net.sh 52:54:00:00:00:11 LAN"
	} else if ($vm_name STREQUAL "testo_vpn_sgw2") {
		exec bash "apt-get install -y libmnl-dev libelf-dev linux-headers-$(uname -r) build-essential pkg-config"
		exec bash "/tmp/rename_net.sh 52:54:00:00:11:00 WAN"
		exec bash "/tmp/rename_net.sh 52:54:00:00:11:11 LAN"
	} else if ($vm_name STREQUAL "testo_vpn_client1") {
		exec bash "/tmp/rename_net.sh 52:54:00:00:22:00 LAN"
	} else if ($vm_name STREQUAL "testo_vpn_client2") {
		exec bash "/tmp/rename_net.sh 52:54:00:00:33:00 LAN"
	} else if ($vm_name STREQUAL "testo_vpn_sniffer") {
		exec bash "/tmp/rename_net.sh 52:54:00:00:44:00 WAN"
	}

	shutdown

	unplug nic nat
	start

	wait $host_name +  " login:" timeout 30s;
	type $login; press Enter
	wait "Password:"; type $password; press Enter
	wait "Welcome to Ubuntu"
}

snapshot wireguard: pkgs_and_net_ready {
	copyto "./WireGuard.tar.xz" "/opt/WireGuard.tar.xz"

	exec bash """
		cd /opt
		tar -xf WireGuard.tar.xz
		cd WireGuard/src
		make
		make install
		modprobe wireguard
		lsmod | fgrep wireguard
	"""
}

flash pubkey_flash {
	fs: "ntfs"
	size: 32Mb
}


test basic: testo_vpn_sgw1(wireguard), testo_vpn_sgw2(wireguard)
{
	testo_vpn_sgw1 exec bash """
		ip a a 192.168.1.1/24 dev WAN
		ip l s WAN up

		ip a a 192.168.0.1/24 dev LAN
		ip l s LAN up

		sysctl net.ipv4.ip_forward=1

		wg genkey > private
		wg pubkey < private > public.key

		ip link add wg0 type wireguard
		ip a a 10.0.0.1/24 dev wg0

		wg set wg0 private-key private
		wg set wg0 listen-port 51820
		ip l s wg0 up
	"""

	testo_vpn_sgw2 exec bash """
		ip a a 192.168.1.2/24 dev WAN
		ip l s WAN up

		ip a a 192.168.2.1/24 dev LAN
		ip l s LAN up

		sysctl net.ipv4.ip_forward=1

		wg genkey > private
		wg pubkey < private > public.key

		ip link add wg0 type wireguard
		ip a a 10.0.0.2/24 dev wg0

		wg set wg0 private-key private
		wg set wg0 listen-port 51820
		ip l s wg0 up
	"""

	testo_vpn_sgw1 {
		plug flash pubkey_flash;
		wait timeout 5s
		exec bash """
			mount /dev/vdb /media
			cp public.key /media/sgw1_public.key
			umount /media
		"""
		unplug flash pubkey_flash
	}

	testo_vpn_sgw2 {
		plug flash pubkey_flash;
		wait timeout 5s
		exec bash """
			mount /dev/vdb /media
			cp public.key /media/sgw2_public.key
			cp /media/sgw1_public.key ~/
			umount /media
		"""
		unplug flash pubkey_flash
	}

	testo_vpn_sgw1 {
		plug flash pubkey_flash;
		wait timeout 5s
		exec bash """
			mount /dev/vdb /media
			cp /media/sgw2_public.key ~/
			umount /media
		"""
		unplug flash pubkey_flash
	}

	testo_vpn_sgw1 exec bash "wg set wg0 peer $(cat ~/sgw2_public.key) allowed-ips 10.0.0.2/32 endpoint 192.168.1.2:51820"
	testo_vpn_sgw2 exec bash "wg set wg0 peer $(cat ~/sgw1_public.key) allowed-ips 10.0.0.1/32 endpoint 192.168.1.1:51820"

	testo_vpn_sgw1 exec bash "ping -c 10 10.0.0.2"
	testo_vpn_sgw2 exec bash "ping -c 10 10.0.0.1"
}
