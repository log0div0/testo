
include "../common.testo"

network nat {
	mode: "nat"
}

network net1 {
	mode: "internal"
}

network net2 {
	mode: "internal"
}

network net3 {
	mode: "internal"
}

param default_password "1111"

param sgw1_login "vpn-sgw1"
param sgw1_host_name "vpn-sgw1"

param sgw2_login "vpn-sgw2"
param sgw2_host_name "vpn-sgw2"

param client1_login "vpn-client1"
param client1_host_name "vpn-client1"

param client2_login "vpn-client2"
param client2_host_name "vpn-client2"

machine vpn_sgw1 {
	cpus: 1
	ram: 1024Mb
	iso: "${ISO_DIR}/ubuntu-16.04.6-server-amd64.iso"
	disk_size: 4Gb
	nic nat: {
		attached_to: "nat"
		adapter_type: "e1000"
	}

	nic WAN: {
		attached_to: "net2"
		mac: "52:54:00:00:00:00"
		adapter_type: "e1000"
	}

	nic LAN: {
		attached_to: "net1"
		mac: "52:54:00:00:00:11"
		adapter_type: "e1000"
	}
}

machine vpn_sgw2 {
	cpus: 1
	ram: 1024Mb
	iso: "${ISO_DIR}/ubuntu-16.04.6-server-amd64.iso"
	disk_size: 4Gb
	nic nat: {
		attached_to: "nat"
		adapter_type: "e1000"
	}

	nic WAN: {
		attached_to: "net2"
		mac: "52:54:00:00:11:00"
		adapter_type: "e1000"
	}

	nic LAN: {
		attached_to: "net3"
		mac: "52:54:00:00:11:11"
		adapter_type: "e1000"
	}
}

machine vpn_client1 {
	cpus: 1
	ram: 512Mb
	iso: "${ISO_DIR}/ubuntu-16.04.6-server-amd64.iso"
	disk_size: 4Gb

	nic nat: {
		attached_to: "nat"
		adapter_type: "e1000"
	}

	nic LAN: {
		attached_to: "net1"
		mac: "52:54:00:00:22:00"
		adapter_type: "e1000"
	}
}

machine vpn_client2 {
	cpus: 1
	ram: 512Mb
	iso: "${ISO_DIR}/ubuntu-16.04.6-server-amd64.iso"
	disk_size: 5Gb

	nic nat: {
		attached_to: "nat"
		adapter_type: "e1000"
	}

	nic LAN: {
		attached_to: "net3"
		mac: "52:54:00:00:33:00"
		adapter_type: "e1000"
	}
}



test sgws_installed {
	vpn_sgw1 install_ubuntu("${sgw1_host_name}", "${sgw1_login}", "${default_password}")
	vpn_sgw2 install_ubuntu("${sgw2_host_name}", "${sgw2_login}", "${default_password}")
}

test clients_installed {
	vpn_client1 install_ubuntu("${client1_host_name}", "${client1_login}", "${default_password}")
	vpn_client2 install_ubuntu("${client2_host_name}", "${client2_login}", "${default_password}")
}

test sgws_guest_additions: sgws_installed  {
	vpn_sgw1 install_guest_additions("${sgw1_host_name}", "${sgw1_login}", "${default_password}")
	vpn_sgw2 install_guest_additions("${sgw2_host_name}", "${sgw2_login}", "${default_password}")
}

test clients_guest_additions: clients_installed {
	vpn_client1 install_guest_additions("${client1_host_name}", "${client1_login}", "${default_password}")
	vpn_client2 install_guest_additions("${client2_host_name}", "${client2_login}", "${default_password}")
}

test sgws_pkgs: sgws_guest_additions {
	vpn_sgw1, vpn_sgw2 {
		copyto "./utils/rename_net.sh" "/tmp/rename_net.sh"
		exec bash "chmod +x /tmp/rename_net.sh"
	}

	vpn_sgw1 {
		exec bash """
			/tmp/rename_net.sh 52:54:00:00:00:00 WAN
			/tmp/rename_net.sh 52:54:00:00:00:11 LAN
			while true
			do
				dhclient -r
				dhclient
				apt-get install -y libmnl-dev libelf-dev linux-headers-$(uname -r) build-essential pkg-config python-scapy && break
			done
		"""
	}

	vpn_sgw2 {
		exec bash """
			/tmp/rename_net.sh 52:54:00:00:11:00 WAN
			/tmp/rename_net.sh 52:54:00:00:11:11 LAN
			while true
			do
				dhclient -r
				dhclient
				apt-get install -y libmnl-dev libelf-dev linux-headers-$(uname -r) build-essential pkg-config && break
			done
		"""
	}

	vpn_sgw1 unplug_nat("${sgw1_login}", "${default_password}")
	vpn_sgw2 unplug_nat("${sgw2_login}", "${default_password}")
}

test clients_net_renamed: clients_guest_additions {
	vpn_client1, vpn_client2 {
		copyto "./utils/rename_net.sh" "/tmp/rename_net.sh"
		exec bash "chmod +x /tmp/rename_net.sh"
	}

	vpn_client1 {
		exec bash "/tmp/rename_net.sh 52:54:00:00:22:00 LAN"
	}

	vpn_client2 {
		exec bash "/tmp/rename_net.sh 52:54:00:00:33:00 LAN"
	}

	vpn_client1 unplug_nat("${client1_login}", "${default_password}")
	vpn_client2 unplug_nat("${client2_login}", "${default_password}")
}

test install_wireguard: sgws_pkgs {
	vpn_sgw1, vpn_sgw2 {
		copyto "./WireGuard.tar.xz" "/opt/WireGuard.tar.xz"

		exec bash """
			cd /opt
			tar -xf WireGuard.tar.xz
			cd WireGuard/src
			make
			make install
			modprobe wireguard
			lsmod | fgrep wireguard
		"""
		wait timeout 1s
	}

}

flash pubkey_flash {
	fs: "ntfs"
	size: 32Mb
}
