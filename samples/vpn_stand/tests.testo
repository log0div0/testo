
include "./installations.testo"

flash pubkey_flash {
	fs: "ntfs"
	size: 32Mb
}

param sgw1_vpn_ip "10.0.0.1"
param sgw1_vpn_ip_netmask "24"
param sgw2_vpn_ip "10.0.0.2"
param sgw2_vpn_ip_netmask "24"

param client1_network "192.168.1.0"
param client2_network "192.168.4.0"

test install_wireguard: sgws_prepare {
	sgw1, sgw2 {
		copyto "./WireGuard.tar.xz" "/opt/WireGuard.tar.xz"

		exec bash """
			cd /opt
			tar -xf WireGuard.tar.xz
			cd WireGuard/src
			make
			make install
			modprobe wireguard
			lsmod | fgrep wireguard
		"""
		wait timeout 1s
	}

}

test sgw_basic: install_wireguard, router_prepare
{
	sgw1 exec bash "ping -c10 ${sgw2_outer_ip}"
	sgw2 exec bash "ping -c10 ${sgw1_outer_ip}"

	sgw1 exec bash """
		wg genkey > private
		wg pubkey < private > public.key

		ip link add wg0 type wireguard
		ip a a ${sgw1_vpn_ip}/${sgw1_vpn_ip_netmask} dev wg0

		wg set wg0 private-key private
		wg set wg0 listen-port 51820
		ip l s wg0 up
	"""

	sgw2 exec bash """
		sysctl net.ipv4.ip_forward=1

		wg genkey > private
		wg pubkey < private > public.key

		ip link add wg0 type wireguard
		ip a a ${sgw2_vpn_ip}/${sgw2_vpn_ip_netmask} dev wg0

		wg set wg0 private-key private
		wg set wg0 listen-port 51820
		ip l s wg0 up
	"""

	sgw1 {
		plug flash pubkey_flash;
		wait timeout 5s
		exec bash """
			mount /dev/sdb1 /media
			cp public.key /media/sgw1_public.key
			umount /media
		"""
		unplug flash pubkey_flash
	}

	sgw2 {
		plug flash pubkey_flash;
		wait timeout 5s
		exec bash """
			mount /dev/sdb1 /media
			cp public.key /media/sgw2_public.key
			cp /media/sgw1_public.key ~/
			umount /media
		"""
		unplug flash pubkey_flash
	}

	sgw1 {
		plug flash pubkey_flash;
		wait timeout 5s
		exec bash """
			mount /dev/sdb1 /media
			cp /media/sgw2_public.key ~/
			umount /media
		"""
		unplug flash pubkey_flash
	}

	sgw1 exec bash "wg set wg0 peer $(cat ~/sgw2_public.key) allowed-ips ${sgw2_vpn_ip}/32 endpoint ${sgw2_outer_ip}:51820"
	sgw2 exec bash "wg set wg0 peer $(cat ~/sgw1_public.key) allowed-ips ${sgw1_vpn_ip}/32 endpoint ${sgw1_outer_ip}:51820"

	router {
		enter_sudo("${router_host_name}", "${router_login}", "${default_password}")
		type "tcpdump -i sgw1_side -w /tmp/captured.pcapng"; press Enter
	}

	sgw1 exec bash "ping -c10 ${sgw2_vpn_ip}"
	sgw2 exec bash "ping -c10 ${sgw1_vpn_ip}"

	router {
		press LEFTCTRL+C
		wait timeout 2s
		exec python """
			from scapy.all import *

			packets = rdpcap('/tmp/captured.pcapng')

			for pkt in packets:
				if ICMP in pkt:
					exit(1)

		"""
	}
}

[no_snapshots: true]
test sgw_basic_with_clients: sgw_basic, clients_prepare
{
	sgw1 exec bash """
		ip r a default via ${sgw2_vpn_ip} dev wg0 table 1056
		ip rule add from ${client1_network}/${client1_main_ip_netmask} to ${client2_network}/${client2_main_ip_netmask} lookup 1056
	"""

	sgw2 exec bash """
		ip r a default via ${sgw1_vpn_ip} dev wg0 table 1056
		ip rule add from ${client2_network}/${client2_main_ip_netmask} to ${client1_network}/${client1_main_ip_netmask} lookup 1056
	"""

	sgw1 exec bash "wg set wg0 peer $(cat ~/sgw2_public.key) allowed-ips ${sgw2_vpn_ip}/32,${client2_network}/${client2_main_ip_netmask} endpoint ${sgw2_outer_ip}:51820"
	sgw2 exec bash "wg set wg0 peer $(cat ~/sgw1_public.key) allowed-ips ${sgw1_vpn_ip}/32,${client1_network}/${client1_main_ip_netmask} endpoint ${sgw1_outer_ip}:51820"

	router {
		type "tcpdump -i sgw1_side -w /tmp/captured.pcapng"; press Enter
	}

	client1 exec bash "ping -c 10 ${client2_main_ip}"
	client2 exec bash "ping -c 10 ${client1_main_ip}"

	router {
		press LEFTCTRL+C
		wait timeout 2s
		exec python """
			from scapy.all import *

			packets = rdpcap('/tmp/captured.pcapng')

			for pkt in packets:
				if ICMP in pkt:
					exit(1)

		"""
	}
}

[no_snapshots: true]
test sgw_routes_misconfigured: sgw_basic, clients_prepare
{
	#Oh no! Somehow special routes for VPN tunnel were not installed
	#In the Kernel! Maybe installing script had failed
	#Let's see what will happen now...

	#Let's assume the router knows how to deliver packets to the end-point clients
	router exec bash "ip r a ${client1_network}/${client1_main_ip_netmask} via ${sgw1_outer_ip}"
	router exec bash "ip r a ${client2_network}/${client2_main_ip_netmask} via ${sgw2_outer_ip}"
	router {
		type "tcpdump -i sgw1_side -w /tmp/captured.pcapng"; press Enter
	}

	client1 exec bash "ping -c 10 ${client2_main_ip}"
	client2 exec bash "ping -c 10 ${client1_main_ip}"

	router {
		press LEFTCTRL+C
		wait timeout 2s
		exec python """
			from scapy.all import *

			packets = rdpcap('/tmp/captured.pcapng')

			for pkt in packets:
				if ICMP in pkt:
					exit(1)

		"""
	}
}
